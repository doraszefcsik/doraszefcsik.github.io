[
  {
    "objectID": "cv/index.html",
    "href": "cv/index.html",
    "title": "Curriculum vitae",
    "section": "",
    "text": "Download current CV"
  },
  {
    "objectID": "dataviz/index.html",
    "href": "dataviz/index.html",
    "title": "Data Vizz",
    "section": "",
    "text": "Coming soon."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Hi, I’m Dóra!",
    "section": "",
    "text": "Email\n  \n  \n    \n     Github\n  \n  \n    \n     LinkedIn\n  \n\n\n\n\nHi, I’m Dóra!\nI am a psychologist and data analyst. My research interests cover a wide range of topics from business intelligence to sustainability and neuroscience. On this site, I offer a glimpse into my projects.\nFeel free to contact me if you have any questions or would like to discuss potential projects."
  },
  {
    "objectID": "projects/index.html",
    "href": "projects/index.html",
    "title": "Projects",
    "section": "",
    "text": "Cyclistic Case Study\n\n\n\n\n\n\n\n\n\n\n\n\nDóra Szefcsik\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects/index.html#the-history-of-the-war-of-the-ring",
    "href": "projects/index.html#the-history-of-the-war-of-the-ring",
    "title": "Projects",
    "section": "The History of the War of the Ring",
    "text": "The History of the War of the Ring\n\narXiv Preprint | Code\nI am creating a comprehensive and detailed history of the conflict that goes beyond the surface-level events. By gathering information from a variety of sources, including my own memories, written accounts, and oral histories, I hope to shed new light on this important period in Middle-earth’s history and provide valuable insights into the motivations and actions of the various players involved."
  },
  {
    "objectID": "projects/index.html#title-2",
    "href": "projects/index.html#title-2",
    "title": "Projects",
    "section": "Title 2",
    "text": "Title 2\n\narXiv Preprint | Code\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
  },
  {
    "objectID": "projects/index.html#the-focus-of-the-analysis",
    "href": "projects/index.html#the-focus-of-the-analysis",
    "title": "Cyclistic Case Study",
    "section": "The focus of the analysis",
    "text": "The focus of the analysis\nAnalyzing historical bike trip data to identify trends that can guide Cyclistic’s future marketing program."
  },
  {
    "objectID": "projects/index.html#business-questions",
    "href": "projects/index.html#business-questions",
    "title": "Cyclistic Case Study",
    "section": "Business Questions",
    "text": "Business Questions\nIn what ways do annual members and casual riders use Cyclistic bikes differently?\n\nWhat time of the day/week/month/year do members and casual riders use the service?\nDo members and casual users differ in the time they spend cycling?\nWhat types of bikes do members and casual users prefer?\nAre there any other differences that can help us better understand the needs of occasional and year-round users?\nWhat makes members stand out from the crowd? Can we draw a casual rider vs. member profile?"
  },
  {
    "objectID": "projects/index.html#data-sources",
    "href": "projects/index.html#data-sources",
    "title": "Cyclistic Case Study",
    "section": "Data Sources",
    "text": "Data Sources\nThe dataset is acquired from Divvy’s public data and made available by Motivate International Inc. under this license. It includes bike rides between 1 April 2022 and 31 March 2023."
  },
  {
    "objectID": "projects/index.html#data-credibility",
    "href": "projects/index.html#data-credibility",
    "title": "Cyclistic Case Study",
    "section": "Data Credibility",
    "text": "Data Credibility\n\nReliable: Lyft Bikes and Scooters, LLC (Bikeshare) operates the City of Chicago’s Divvy bicycle sharing service. Bikeshare makes certain Divvy system data owned by the City available to the public. The City of Chicago owns all right, title, and interest in the Data.\nOriginal: the data is collected by the Divvy systems\nComprehensive: the data contains all critical information needed to answer the business question\nCurrent: the data covers the last 12 month\nCited: the data is collected and maintained by a credible organization\nComplies with Data Privacy: the data is anonymized and does not contain any personally identifiable information\nUnbiased: contains data that is representative of all users of the bike share service"
  },
  {
    "objectID": "projects/index.html#downloading-and-storing-the-data",
    "href": "projects/index.html#downloading-and-storing-the-data",
    "title": "Cyclistic Case Study",
    "section": "Downloading and storing the data",
    "text": "Downloading and storing the data\n\nDownloaded the data that covers the last 12 month from: Divvy’s public historical trip data\nUnzipped the files\nOpened the csv files one-by-one in Excel for exploration\nAssessed the number of variables and the length of the data and decided to continue the data processing in RStudio"
  },
  {
    "objectID": "projects/index.html#library-and-setup",
    "href": "projects/index.html#library-and-setup",
    "title": "Cyclistic Case Study",
    "section": "Library and Setup",
    "text": "Library and Setup\nSet working directory\n\nsetwd(\"~/R/case_study_cyclistic/01_data\")\n\nRequired packages:\n\npacman::p_load(\n  data.table,   ## fread function\n  skimr,        ## summary statistics\n  writexl,      ## xlsx exporter\n  tidyverse,    ## data cleaning and manipulation\n  janitor,      ## data cleaning\n  naniar,       ## exploring missing data\n  visdat,       ## visualization of missing data\n  ggplot2,      ## visualization\n  paletteer,    ## color palettes\n  scales,       ## scaling\n  ggthemes,     ## extra themes for plotting\n  gt,           ## making tables\n  knitr         ## report generation\n)"
  },
  {
    "objectID": "projects/index.html#loading-the-data",
    "href": "projects/index.html#loading-the-data",
    "title": "Cyclistic Case Study",
    "section": "Loading the data",
    "text": "Loading the data\nReading data from multiple files:\n\nbike_rides_raw_01 <-\n  list.files(path = \"~/R/case_study_cyclistic/01_data\", pattern = \"*.csv\") |>\n  map(~ fread(., data.table = TRUE, header = TRUE, fill = FALSE, \n              showProgress = TRUE, na.strings = c(\"\",NA))\n      ) |>\n  bind_rows()\n\nError in `map()`:\ni In index: 1.\nCaused by error in `fread()`:\n! File '01_bikedata_2023-03.csv' does not exist or is non-readable. getwd()=='C:/Users/Eper/Documents/R/website/projects'"
  },
  {
    "objectID": "projects/index.html#exploration",
    "href": "projects/index.html#exploration",
    "title": "Cyclistic Case Study",
    "section": "Exploration",
    "text": "Exploration\n\nclass(bike_rides_raw_01)\n\nError in eval(expr, envir, enclos): object 'bike_rides_raw_01' not found\n\n\n\nsetkey(bike_rides_raw_01, ride_id)\n\nError in setkey(bike_rides_raw_01, ride_id): object 'bike_rides_raw_01' not found\n\n\nHaving a glimpse at the data:\n\nglimpse(bike_rides_raw_01)\n\nError in glimpse(bike_rides_raw_01): object 'bike_rides_raw_01' not found\n\n\nChecking the summary statistics:\n\nsummary(bike_rides_raw_01)\n\nError in summary(bike_rides_raw_01): object 'bike_rides_raw_01' not found\n\n\nLooking for duplicates:\n\nsum(duplicated(bike_rides_raw_01))\n\nError in duplicated(bike_rides_raw_01): object 'bike_rides_raw_01' not found\n\n\nSkimming the data table:\n\nskim_without_charts(bike_rides_raw_01)\n\nError in skim_without_charts(bike_rides_raw_01): object 'bike_rides_raw_01' not found"
  },
  {
    "objectID": "projects/index.html#data-description",
    "href": "projects/index.html#data-description",
    "title": "Cyclistic Case Study",
    "section": "Data Description",
    "text": "Data Description\nThe raw data set contains data on 5,803,720 bike rides along 13 variables:\n\nride_id <chr> : a 16-digit unique trip identifier, consisting of letters and numbers\nrideable_type <chr> : type of bike, assuming one of three categories:\n\nclassic_bike\ndocked_bike\nelectric_bike\n\nstarted_at <dttm> : the start date and time of the trip\nended_at <dttm> : the end date and time of the trip\nstart_station_name <chr> : the name of the station from which the bike trip started\nstart_station_id <chr> : the ID of the station from which the bike trip started\nend_station_name <chr> : the name of the station where the bike trip ended\nend_station_id <chr> : the ID of the station where the bike trip ended\nstart_lat <dbl> : start latitude, ranges between 41.64 and 42.07 degrees\nstart_lng <dbl> : start longitude, ranges between -87.84 and -87.52 degrees\nend_lat <dbl> : end latitude, ranges between 0.00 and 42.37 degrees\nend_lng <dbl> : end longitude, ranges between -88.14 and 0.00 degrees\nmember_casual <chr> : type of user, assuming one of two categories:\n\nmember\ncasual"
  },
  {
    "objectID": "projects/index.html#observations",
    "href": "projects/index.html#observations",
    "title": "Cyclistic Case Study",
    "section": "Observations",
    "text": "Observations\n\nBlank cells and missing data to check:\n\nstart_station_name (n_empty=839082)\nstart_station_id (n_empty=839214)\nend_station_name (n_empty=896319)\nend_station_id (n_empty=896460)\nend_lat (n_missing=5855)\nend_lng (n_missing=5855)\n\nInconsistent number of decimals to check:\n\nstart_lat\nstart_lng\nend_lat\neng_lng\n\nOutlying data to check: end_lat=0.00, end_lng=0.00\nData type - string to factor:\n\nrideable_type\nmember_casual\nstart_station_name\nend_station_name\n\n\nExporting a backup file before going on with data cleaning:\n\nfwrite(bike_rides_raw_01, \"~/R/case_study_cyclistic/04_backup/bike_rides_raw_01.csv\")\n\nError in fwrite(bike_rides_raw_01, \"~/R/case_study_cyclistic/04_backup/bike_rides_raw_01.csv\"): object 'bike_rides_raw_01' not found"
  },
  {
    "objectID": "projects/index.html#variable-names",
    "href": "projects/index.html#variable-names",
    "title": "Cyclistic Case Study",
    "section": "Variable names",
    "text": "Variable names\nColumn names:\n\ncolnames(bike_rides_raw_01)\n\nError in is.data.frame(x): object 'bike_rides_raw_01' not found\n\n\nRenaming variables:\n\nbike_rides_raw_02 <- bike_rides_raw_01 |> \n  rename(\n    bike_type = rideable_type,\n    start_time = started_at,\n    end_time = ended_at,\n    user_type = member_casual\n  )\n\nError in rename(bike_rides_raw_01, bike_type = rideable_type, start_time = started_at, : object 'bike_rides_raw_01' not found\n\ncolnames(bike_rides_raw_02)\n\nError in is.data.frame(x): object 'bike_rides_raw_02' not found"
  },
  {
    "objectID": "projects/index.html#data-types",
    "href": "projects/index.html#data-types",
    "title": "Cyclistic Case Study",
    "section": "Data types",
    "text": "Data types\nEnsuring that each column has the correct data type:\n\nstr(bike_rides_raw_02)\n\nError in str(bike_rides_raw_02): object 'bike_rides_raw_02' not found\n\n\nChanging data types from string to factor where variables represent categorical data:\n\nbike_rides_raw_02$bike_type <- as.factor(bike_rides_raw_02$bike_type)\n\nError in is.factor(x): object 'bike_rides_raw_02' not found\n\nbike_rides_raw_02$user_type <- as.factor(bike_rides_raw_02$user_type)\n\nError in is.factor(x): object 'bike_rides_raw_02' not found"
  },
  {
    "objectID": "projects/index.html#incorrect-data",
    "href": "projects/index.html#incorrect-data",
    "title": "Cyclistic Case Study",
    "section": "Incorrect data",
    "text": "Incorrect data\nLet’s find out if there are any misspellings, incorrect naming or other types of errors in our data.\n\nDivvy Bicycle Stations\nOfficial Divvy stations data is available at this link.\n\ndivvy_stations <- read_csv(\"~/R/case_study_cyclistic/03_work_in_progress/Divvy_Bicycle_Stations.csv\")\n\nRows: 1419 Columns: 8\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr (3): Station Name, Status, Location\ndbl (5): ID, Total Docks, Docks in Service, Latitude, Longitude\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nSelecting variables for comparison:\n\ndivvy_stations <- divvy_stations |>\n  select(ID, station_name = \"Station Name\", Latitude, Longitude) |>\n  unite(\n    col = Location,\n    Latitude, Longitude,\n    sep = \", \"\n  )\n\nAccording to Divvy, their system has 1419 unique stations.\nFiltering all unique start station names and IDs in our data table:\n\nstart_stations <- bike_rides_raw_02 |>\n  mutate(across(c(start_lat, start_lng), ~ round(., 5))) |>\n  distinct(start_station_name, start_station_id, start_lat, start_lng) |>\n  filter(!is.na(start_station_name) | !is.na(start_station_id)) |>\n  select(station_name = start_station_name, station_id = start_station_id, lat = start_lat, lng = start_lng)\n\nError in mutate(bike_rides_raw_02, across(c(start_lat, start_lng), ~round(., : object 'bike_rides_raw_02' not found\n\nhead(start_stations)\n\nError in head(start_stations): object 'start_stations' not found\n\n\nFiltering all unique end station names and IDs in our data table:\n\nend_stations <- bike_rides_raw_02 |>\n  mutate(across(c(end_lat, end_lng), ~ round(., 5))) |>\n  distinct(end_station_name, end_station_id, end_lat, end_lng) |>\n  filter(!is.na(end_station_name) | !is.na(end_station_id)) |>\n  select(station_name = end_station_name, station_id = end_station_id, lat = end_lat, lng = end_lng)\n\nError in mutate(bike_rides_raw_02, across(c(end_lat, end_lng), ~round(., : object 'bike_rides_raw_02' not found\n\nhead(end_stations)\n\nError in head(end_stations): object 'end_stations' not found\n\n\nJoining together the two data tables:\n\nstations <- rbind(start_stations,end_stations)\n\nError in rbind(start_stations, end_stations): object 'start_stations' not found\n\nstations <- unique(stations)\n\nError in unique(stations): object 'stations' not found\n\nstations <- stations |> arrange(stations$station_id)\n\nError in arrange(stations, stations$station_id): object 'stations' not found\n\nhead(stations)\n\nError in head(stations): object 'stations' not found\n\n\nExporting data for further exploration in Excel:\n\nwrite_xlsx(divvy_stations, \"divvy_stations.xlsx\")\n\nwrite_xlsx(stations, \"stations.xlsx\")\n\nError in is.data.frame(x): object 'stations' not found\n\n\n\n\nComparing station names and IDs with Divvy station data:\nObservations:\n\nSeveral different coordinates are associated with one station ID.\nSome station names and identifiers refer to a company warehouse or repair station:\n\nWEST CHI-WATSON - DIVVY 001 Warehouse test station\nWestChi - DIVVY 001 Warehouse test station\nWEST CHI-WATSON - DIVVY 001\nBase - 2132 W Hubbard - Hubbard Bike-checking (LBS-WH-TEST)\nBase - 2132 W Hubbard Warehouse - Hubbard Bike-checking (LBS-WH-TEST)\nDIVVY CASSETTE REPAIR MOBILE STATION - DIVVY CASSETTE REPAIR MOBILE STATION\nNewHastings - 2059 Hastings Warehouse Station\n\nWe can spot a few typos:\n\nPublic Rack - Pulaski Rd & 65th St –> Public Rack - Pulaski Rd & 65th St\nPublic Rack - Kedzie Ave & 62nd Pl –> Public Rack - Kedzie Ave & 62nd Pl\n\nWe can also find inconsistent naming:\n\nBissell St & Armitage Ave - Charging –> Bissell St & Armitage Ave*\nBase - 2132 W Hubbard –> Base - 2132 W Hubbard Warehouse\nWestChi –> WEST CHI-WATSON\n\nand station names that don’t exist on the Divvy website:\n\nElizabeth St & Randolph St\nStony Island Ave & 63rd St\n\n\nSaving a backup file:\n\nfwrite(bike_rides_raw_02, \"~/R/case_study_cyclistic/04_backup/bike_rides_raw_02.csv\")\n\nError in fwrite(bike_rides_raw_02, \"~/R/case_study_cyclistic/04_backup/bike_rides_raw_02.csv\"): object 'bike_rides_raw_02' not found\n\nbike_rides_raw_03 <- bike_rides_raw_02\n\nError in eval(expr, envir, enclos): object 'bike_rides_raw_02' not found\n\n\n\n\nCorrecting misspellings\nListing the spelling errors:\n\nbike_rides_raw_02 |>\n  filter(start_station_name == \"Public Rack - Pulaski Rd &amp; 65th St\" |\n           start_station_name == \"Public Rack - Kedzie Ave &amp; 62nd Pl\") |>\n  count(start_station_id, start_station_name, sort = T)\n\nError in filter(bike_rides_raw_02, start_station_name == \"Public Rack - Pulaski Rd &amp; 65th St\" | : object 'bike_rides_raw_02' not found\n\nbike_rides_raw_02 |>\n  filter(end_station_name == \"Public Rack - Pulaski Rd &amp; 65th St\" |\n           end_station_name == \"Public Rack - Kedzie Ave &amp; 62nd Pl\") |>\n  count(end_station_id, end_station_name, sort = T)\n\nError in filter(bike_rides_raw_02, end_station_name == \"Public Rack - Pulaski Rd &amp; 65th St\" | : object 'bike_rides_raw_02' not found\n\n\nReplacing incorrect start station names with the correct names:\n\nbike_rides_raw_03$start_station_name[bike_rides_raw_03$start_station_name == \"Public Rack - Pulaski Rd &amp; 65th St\"] <- \"Public Rack - Pulaski Rd & 65th St\"\n\nError in bike_rides_raw_03$start_station_name[bike_rides_raw_03$start_station_name == : object 'bike_rides_raw_03' not found\n\nbike_rides_raw_03$start_station_name[bike_rides_raw_03$start_station_name ==  \"Public Rack - Kedzie Ave &amp; 62nd Pl\"] <- \"Public Rack - Kedzie Ave & 62nd Pl\"\n\nError in bike_rides_raw_03$start_station_name[bike_rides_raw_03$start_station_name == : object 'bike_rides_raw_03' not found\n\n\nChecking the results:\n\nbike_rides_raw_03 |>\n  filter(start_station_id == 1038 |\n         start_station_id == 1033 |\n         start_station_name == \"Public Rack - Pulaski Rd & 65th St\" |\n         start_station_name == \"Public Rack - Kedzie Ave & 62nd Pl\") |>\n  count(start_station_id, start_station_name, sort = T)\n\nError in filter(bike_rides_raw_03, start_station_id == 1038 | start_station_id == : object 'bike_rides_raw_03' not found\n\n\n\n\nDealing with inconsistent naming\n\nBissell St & Armitage Ave - Charging –> Bissell St & Armitage Ave*\nBase - 2132 W Hubbard –> Base - 2132 W Hubbard Warehouse\nWestChi –> WEST CHI-WATSON\n\n\nbike_rides_raw_03 |> \n  filter(start_station_name == \"Bissell St & Armitage Ave - Charging\" |\n           start_station_name == \"Base - 2132 W Hubbard\" |\n           start_station_name == \"Base - 2132 W Hubbard Warehouse\" |\n           start_station_name == \"WestChi\" |\n           start_station_name == \"WEST CHI-WATSON\") |>\n  count(start_station_id, start_station_name, sort = T)\n\nError in filter(bike_rides_raw_03, start_station_name == \"Bissell St & Armitage Ave - Charging\" | : object 'bike_rides_raw_03' not found\n\nbike_rides_raw_03 |> \n  filter(end_station_name == \"Bissell St & Armitage Ave - Charging\" |\n           end_station_name == \"Base - 2132 W Hubbard\" |\n           end_station_name == \"Base - 2132 W Hubbard Warehouse\" |\n           end_station_name == \"WestChi\" |\n           end_station_name == \"WEST CHI-WATSON\") |>\n  count(end_station_id, end_station_name, sort = T)\n\nError in filter(bike_rides_raw_03, end_station_name == \"Bissell St & Armitage Ave - Charging\" | : object 'bike_rides_raw_03' not found\n\n\nCorrecting station names:\n\n## start station names\n\nbike_rides_raw_03$start_station_name[bike_rides_raw_03$start_station_name == \"Base - 2132 W Hubbard\"] <- \"Base - 2132 W Hubbard Warehouse\"\n\nError in bike_rides_raw_03$start_station_name[bike_rides_raw_03$start_station_name == : object 'bike_rides_raw_03' not found\n\nbike_rides_raw_03$start_station_name[bike_rides_raw_03$start_station_name == \"WestChi\"] <- \"WEST CHI-WATSON\"\n\nError in bike_rides_raw_03$start_station_name[bike_rides_raw_03$start_station_name == : object 'bike_rides_raw_03' not found\n\n## end station names\n\nbike_rides_raw_03$end_station_name[bike_rides_raw_03$end_station_name == \"Base - 2132 W Hubbard\"] <- \"Base - 2132 W Hubbard Warehouse\"\n\nError in bike_rides_raw_03$end_station_name[bike_rides_raw_03$end_station_name == : object 'bike_rides_raw_03' not found\n\nbike_rides_raw_03$end_station_name[bike_rides_raw_03$end_station_name == \"Bissell St & Armitage Ave - Charging\"] <- \"Bissell St & Armitage Ave*\"\n\nError in bike_rides_raw_03$end_station_name[bike_rides_raw_03$end_station_name == : object 'bike_rides_raw_03' not found\n\n\nUnifying the Divvy Warehouse ID:\n\nbike_rides_raw_03$start_station_id[bike_rides_raw_03$start_station_id == \"DIVVY 001 - Warehouse test station\"] <- \"DIVVY 001\"\n\nError in bike_rides_raw_03$start_station_id[bike_rides_raw_03$start_station_id == : object 'bike_rides_raw_03' not found\n\n\nFiltering for Elizabeth St & Randolph St. and Stony Island Ave & 63rd St\n\nbike_rides_raw_02 |> \n  filter(start_station_name == \"Elizabeth St & Randolph St\" |\n           start_station_name == \"Stony Island Ave & 63rd St\" |\n           start_station_id == \"23001\" |\n           start_station_id == \"653B\") |>\n  count(start_station_id, start_station_name, sort = T)\n\nError in filter(bike_rides_raw_02, start_station_name == \"Elizabeth St & Randolph St\" | : object 'bike_rides_raw_02' not found\n\nbike_rides_raw_02 |> \n  filter(end_station_name == \"Elizabeth St & Randolph St\" |\n           end_station_name == \"Stony Island Ave & 63rd St\" |\n           end_station_id == \"23001\" |\n           end_station_id == \"653B\") |>\n  count(end_station_id, end_station_name, sort = T)\n\nError in filter(bike_rides_raw_02, end_station_name == \"Elizabeth St & Randolph St\" | : object 'bike_rides_raw_02' not found\n\n\nReplacing missing IDs:\n\nbike_rides_raw_03 <- bike_rides_raw_03 |> \n  mutate(start_station_id = ifelse(start_station_name == \"Elizabeth St & Randolph St\" & is.na(start_station_id),\n                                   \"23001\", start_station_id),\n         start_station_id = ifelse(start_station_name == \"Stony Island Ave & 63rd St\" & is.na(start_station_id),\n                                   \"653B\", start_station_id))\n\nError in mutate(bike_rides_raw_03, start_station_id = ifelse(start_station_name == : object 'bike_rides_raw_03' not found\n\nbike_rides_raw_03 <- bike_rides_raw_03 |> \n  mutate(end_station_id = ifelse(end_station_name == \"Elizabeth St & Randolph St\" & is.na(end_station_id),\n                                   \"23001\", end_station_id),\n         end_station_id = ifelse(end_station_name == \"Stony Island Ave & 63rd St\" & is.na(end_station_id),\n                                   \"653B\", end_station_id))\n\nError in mutate(bike_rides_raw_03, end_station_id = ifelse(end_station_name == : object 'bike_rides_raw_03' not found\n\n\nFiltering for cases where station names are missing but IDs are present:\n\nbike_rides_raw_03 |>\n  filter(is.na(start_station_name) & !is.na(start_station_id)) |>\n  count(start_station_name, sort = T)\n\nError in filter(bike_rides_raw_03, is.na(start_station_name) & !is.na(start_station_id)): object 'bike_rides_raw_03' not found\n\nbike_rides_raw_03 |>\n  filter(is.na(end_station_name) & !is.na(end_station_id)) |>\n  count(end_station_name, sort = T)\n\nError in filter(bike_rides_raw_03, is.na(end_station_name) & !is.na(end_station_id)): object 'bike_rides_raw_03' not found\n\n\nNo other cases are found where the station ID is present.\nFiltering for cases where station IDs are missing but names are present:\n\nbike_rides_raw_03 |>\n  filter(is.na(start_station_id) & !is.na(start_station_name)) |>\n  count(start_station_id, sort = T)\n\nError in filter(bike_rides_raw_03, is.na(start_station_id) & !is.na(start_station_name)): object 'bike_rides_raw_03' not found\n\nbike_rides_raw_03 |>\n  filter(is.na(end_station_id) & !is.na(end_station_name)) |>\n  count(end_station_id, sort = T)\n\nError in filter(bike_rides_raw_03, is.na(end_station_id) & !is.na(end_station_name)): object 'bike_rides_raw_03' not found\n\n\nNo other cases are found where the station name is present.\n\n\nNull end coordinates\n\nnull_end_coord <- bike_rides_raw_02 |>\n  subset(end_lat == 0 | end_lng == 0)\n\nError in subset(bike_rides_raw_02, end_lat == 0 | end_lng == 0): object 'bike_rides_raw_02' not found\n\nnrow(null_end_coord)\n\nError in nrow(null_end_coord): object 'null_end_coord' not found\n\n\nWe can find 8 rides where the end station is Green St & Madison Ave* but the coordinates are missing.\nSearching for Green St & Madison Ave* station coordinates:\n\nbike_rides_raw_03 |>\n  filter(start_station_name == \"Green St & Madison Ave*\") |>\n  count(start_station_name, start_station_id, start_lat, start_lng, sort = T) |>\n  head(10)\n\nError in filter(bike_rides_raw_03, start_station_name == \"Green St & Madison Ave*\"): object 'bike_rides_raw_03' not found\n\n\n\nbike_rides_raw_03 |>\n  filter(end_station_name == \"Green St & Madison Ave*\") |>\n  count(end_station_name, end_station_id, end_lat, end_lng, sort = T) |>\n  head(10)\n\nError in filter(bike_rides_raw_03, end_station_name == \"Green St & Madison Ave*\"): object 'bike_rides_raw_03' not found\n\n\nReplacing zero coordinates with the correct values:\n\nbike_rides_raw_03$end_lat[bike_rides_raw_03$end_lat == 0] <- 41.88183\n\nError in bike_rides_raw_03$end_lat[bike_rides_raw_03$end_lat == 0] <- 41.88183: object 'bike_rides_raw_03' not found\n\nbike_rides_raw_03$end_lng[bike_rides_raw_03$end_lng == 0] <- -87.64883\n\nError in bike_rides_raw_03$end_lng[bike_rides_raw_03$end_lng == 0] <- -87.64883: object 'bike_rides_raw_03' not found\n\n\nSaving a backup file:\n\nfwrite(bike_rides_raw_03, \"~/R/case_study_cyclistic/04_backup/bike_rides_raw_03.csv\")\n\nError in fwrite(bike_rides_raw_03, \"~/R/case_study_cyclistic/04_backup/bike_rides_raw_03.csv\"): object 'bike_rides_raw_03' not found\n\nbike_rides_raw_04 <- bike_rides_raw_03\n\nError in eval(expr, envir, enclos): object 'bike_rides_raw_03' not found"
  },
  {
    "objectID": "projects/index.html#data-manipulation",
    "href": "projects/index.html#data-manipulation",
    "title": "Cyclistic Case Study",
    "section": "Data Manipulation",
    "text": "Data Manipulation\n\nNew variable: travel_time\nCalculating the duration of each bike ride in minutes:\n\nbike_rides_raw_04 <- bike_rides_raw_04 |>\n  mutate(\n    travel_time = round(\n      difftime(\n        end_time, start_time,\n        units = \"mins\"\n      ),\n      digits = 2\n    ), .after = end_time\n  )\n\nError in mutate(bike_rides_raw_04, travel_time = round(difftime(end_time, : object 'bike_rides_raw_04' not found\n\nbike_rides_raw_04$travel_time <- as.numeric(bike_rides_raw_04$travel_time)\n\nError in eval(expr, envir, enclos): object 'bike_rides_raw_04' not found\n\n\n\n\nNew time units\nWe are adding new columns that list the date, year, month, day and hour of each trip. This will allow us to aggregate data for different time units.\ndate\n\nbike_rides_raw_04$date <- as.Date(bike_rides_raw_04$start_time)\n\nError in as.Date(bike_rides_raw_04$start_time): object 'bike_rides_raw_04' not found\n\n\nmonth\n\nbike_rides_raw_04$month <- format(as.Date(bike_rides_raw_04$date), \"%B\")\n\nError in as.Date(bike_rides_raw_04$date): object 'bike_rides_raw_04' not found\n\nbike_rides_raw_04$month <- ordered(bike_rides_raw_04$month, \n                                   levels = c(\"January\", \"February\", \"March\", \n                                              \"April\", \"May\", \"June\", \"July\", \n                                              \"August\", \"September\",\"October\", \n                                              \"November\", \"December\"))\n\nError in factor(x, ..., ordered = TRUE): object 'bike_rides_raw_04' not found\n\n\nday\n\nbike_rides_raw_04$day <- as.integer(format(as.Date(bike_rides_raw_04$date), \"%d\"))\n\nError in as.Date(bike_rides_raw_04$date): object 'bike_rides_raw_04' not found\n\n\nweekday\n\nbike_rides_raw_04$weekday <- format(as.Date(bike_rides_raw_04$date), \"%A\")\n\nError in as.Date(bike_rides_raw_04$date): object 'bike_rides_raw_04' not found\n\nbike_rides_raw_04$weekday <- ordered(bike_rides_raw_04$weekday, \n                                   levels = c(\"Monday\", \"Tuesday\", \"Wednesday\", \n                                              \"Thursday\", \"Friday\", \"Saturday\", \n                                              \"Sunday\"))\n\nError in factor(x, ..., ordered = TRUE): object 'bike_rides_raw_04' not found\n\n\nhour\n\nbike_rides_raw_04$hour <- as.integer(format(bike_rides_raw_04$start_time, \"%H\"))\n\nError in format(bike_rides_raw_04$start_time, \"%H\"): object 'bike_rides_raw_04' not found\n\n\nA look at the new time units:\n\nbike_rides_raw_04 |>\n  select(start_time, date, month, day, weekday, hour) |>\n  head()\n\nError in select(bike_rides_raw_04, start_time, date, month, day, weekday, : object 'bike_rides_raw_04' not found\n\n\n\n\nNew variable: time_of_day\nClassifying the extracted time by time of the day:\n\n## a column time_of_day is created using logic with case_when() \n## to classify rows into\n## morning rush/morning/lunchtime/afternoon/afternoon rush/evening/night\n## based on their hour of departure\n\nbike_rides_raw_04 <- bike_rides_raw_04 |> \n  mutate(\n    time_of_day = case_when(\n      hour >= 7 & hour < 9 ~ \"Morning rush\",\n      hour >= 9 & hour < 12 ~ \"Morning\",\n      hour >= 12 & hour < 13 ~ \"Lunchtime\",\n      hour >= 13 & hour < 16 ~ \"Afternoon\",\n      hour >= 16 & hour < 19 ~ \"Afternoon rush\",\n      hour >= 19 & hour < 22 ~ \"Evening\",\n      hour >= 22 | hour < 7 ~ \"Night\")\n    )\n\nError in mutate(bike_rides_raw_04, time_of_day = case_when(hour >= 7 & : object 'bike_rides_raw_04' not found\n\nbike_rides_raw_04$time_of_day <- as.factor(bike_rides_raw_04$time_of_day)\n\nError in is.factor(x): object 'bike_rides_raw_04' not found\n\nbike_rides_raw_04$time_of_day <- ordered(bike_rides_raw_04$time_of_day, \n                                   levels = c(\"Morning rush\", \"Morning\",\n                                              \"Lunchtime\", \"Afternoon\", \n                                              \"Afternoon rush\", \"Evening\", \n                                              \"Night\"))\n\nError in factor(x, ..., ordered = TRUE): object 'bike_rides_raw_04' not found\n\n\nChecking the new variable:\n\nbike_rides_raw_04 |>\n  select(start_time, date, month, day, weekday, hour, time_of_day) |>\n  head()\n\nError in select(bike_rides_raw_04, start_time, date, month, day, weekday, : object 'bike_rides_raw_04' not found\n\n\nSaving a backup file:\n\nfwrite(bike_rides_raw_04, \"~/R/case_study_cyclistic/04_backup/bike_rides_raw_04.csv\")\n\nError in fwrite(bike_rides_raw_04, \"~/R/case_study_cyclistic/04_backup/bike_rides_raw_04.csv\"): object 'bike_rides_raw_04' not found\n\nbike_rides_raw_05 <- bike_rides_raw_04\n\nError in eval(expr, envir, enclos): object 'bike_rides_raw_04' not found"
  },
  {
    "objectID": "projects/index.html#outliers",
    "href": "projects/index.html#outliers",
    "title": "Cyclistic Case Study",
    "section": "Outliers",
    "text": "Outliers\nDrawing a boxplot to spot outliers:\n\nbike_rides_raw_05 |>      \n  ggplot(aes(travel_time)) +      \n  geom_boxplot(show.legend = F, alpha = .5)\n\nError in ggplot(bike_rides_raw_05, aes(travel_time)): object 'bike_rides_raw_05' not found\n\n\nOur boxplot shows some extreme values. Let’s take a closer look!\n\nsummary(bike_rides_raw_05$travel_time)\n\nError in summary(bike_rides_raw_05$travel_time): object 'bike_rides_raw_05' not found\n\n\n\nFailed trips\nTrips of less than two minutes are very unrealistic. I suspect that these short trips are the result of failed docking attempts, as evidenced by the fact that most of the trips end at the same coordinate as where they started.\nFiltering for negative travel times and extremely short trips:\n\nfailed_trips <- filter(bike_rides_raw_05, travel_time <= 1) \n\nError in filter(bike_rides_raw_05, travel_time <= 1): object 'bike_rides_raw_05' not found\n\nnrow(failed_trips)\n\nError in nrow(failed_trips): object 'failed_trips' not found\n\n\nDropping failed trips:\n\nbike_rides_raw_06 <- filter(bike_rides_raw_05, travel_time > 1)\n\nError in filter(bike_rides_raw_05, travel_time > 1): object 'bike_rides_raw_05' not found\n\n\n\n\nExtremely long trips\nFiltering for extremely long trips:\n\noutliers <- filter(bike_rides_raw_05, travel_time > 1440)\n\nError in filter(bike_rides_raw_05, travel_time > 1440): object 'bike_rides_raw_05' not found\n\nnrow(outliers)\n\nError in nrow(outliers): object 'outliers' not found\n\n\nThe longest trip took 22 days. The 11 longest trips are associated with docked bikes.\nOn Divvy’s website, you can find what rules apply if you keep a bike out for longer than the time included in your membership or pass:\n\nDay Pass holders: unlimited number of 3 hour rides over a 24-hour period. If you keep a bike out for longer than 3 hours at a time, you will be charged an extra $0.17 for each additional minute.\nAnnual Members: the first 45 minutes of each ride are included in the membership price. If you keep a bike out for longer than 45 minutes at a time, you will be charged an extra $0.17 for each additional minute.\nNOTE: If you do not return a bike within a 24-hour period, you may be charged a lost or stolen bike fee of $250 (plus tax).\n\nThis means that bicycles kept out for more than one day can be considered outliers.\nDropping outliers:\n\nbike_rides_raw_06 <- filter(bike_rides_raw_06, travel_time < 1440)\n\nError in filter(bike_rides_raw_06, travel_time < 1440): object 'bike_rides_raw_06' not found\n\n\n\n\nMaintenance-related trips\nFiltering service trips:\n\nwarehouse_trips <- bike_rides_raw_06 |>\n  filter(start_station_name %in% c(\"Base - 2132 W Hubbard Warehouse\",\n                                 \"DIVVY CASSETTE REPAIR MOBILE STATION\",\n                                 \"Hastings LWS\",\n                                 \"NewHastings\",\n                                 \"WEST CHI-WATSON\"\n                                 ) |\n         end_station_name %in% c(\"Base - 2132 W Hubbard Warehouse\",\n                                 \"DIVVY CASSETTE REPAIR MOBILE STATION\",\n                                 \"Hastings LWS\",\n                                 \"NewHastings\",\n                                 \"WEST CHI-WATSON\")\n         )\n\nError in filter(bike_rides_raw_06, start_station_name %in% c(\"Base - 2132 W Hubbard Warehouse\", : object 'bike_rides_raw_06' not found\n\nsetDT(warehouse_trips)\n\nError: Cannot find symbol warehouse_trips\n\nnrow(warehouse_trips)\n\nError in nrow(warehouse_trips): object 'warehouse_trips' not found\n\n\nRemoving all service trips to/from warehouses or repair stations:\n\nbike_rides_raw_06 <- bike_rides_raw_06 |>\n  anti_join(warehouse_trips, join_by(ride_id))\n\nError in anti_join(bike_rides_raw_06, warehouse_trips, join_by(ride_id)): object 'bike_rides_raw_06' not found\n\n\nSaving deleted cases:\n\nfwrite(failed_trips, \"~/R/case_study_cyclistic/05_deleted/failed_trips.csv\")\n\nError in fwrite(failed_trips, \"~/R/case_study_cyclistic/05_deleted/failed_trips.csv\"): object 'failed_trips' not found\n\nsetDT(outliers)\n\nError: Cannot find symbol outliers\n\nfwrite(outliers, \"~/R/case_study_cyclistic/05_deleted/outliers.csv\")\n\nError in fwrite(outliers, \"~/R/case_study_cyclistic/05_deleted/outliers.csv\"): object 'outliers' not found\n\nfwrite(warehouse_trips, \"~/R/case_study_cyclistic/05_deleted/warehouse_trips.csv\")\n\nError in fwrite(warehouse_trips, \"~/R/case_study_cyclistic/05_deleted/warehouse_trips.csv\"): object 'warehouse_trips' not found"
  },
  {
    "objectID": "projects/index.html#missing-data",
    "href": "projects/index.html#missing-data",
    "title": "Cyclistic Case Study",
    "section": "Missing data",
    "text": "Missing data\nWhere does the missingness come from?\n\nIs there a relationship between missing data and other values?\nIs it random or is it systematic?\nCan we find the missing data?\n\n\nsum(!complete.cases(bike_rides_raw_06))\n\nError in complete.cases(bike_rides_raw_06): object 'bike_rides_raw_06' not found\n\n\nPercentage of cases with missing values:\n\npct_miss_case(bike_rides_raw_06)\n\nError in test_if_null(data): object 'bike_rides_raw_06' not found\n\n\nPercentage of missing values:\n\npct_miss(bike_rides_raw_06)\n\nError in test_if_null(x): object 'bike_rides_raw_06' not found\n\n\nWe have 1,266,200 cases with missing data, which represents 22.36% of the bike trips in our data table. In total, 2.91% of the values are missing.\n\nPatterns of missingness\nSummarizing the missingness in each variable:\n\nmiss_var_summary(bike_rides_raw_06)\n\nError in test_if_null(data): object 'bike_rides_raw_06' not found\n\n\nLet’s look at how missingness is distributed across variables:\n\ngg_miss_upset(bike_rides_raw_06)\n\nError in is.data.frame(x): object 'bike_rides_raw_06' not found\n\n\nThe graph shows four intersections between missing data:\n\ngroup: both end station names and IDs are missing - 459,931 cases\ngroup: both start station names and IDs are missing - 422,235 cases\ngroup: both start and end station names and IDs are missing - 383,353 cases\ngroup: both end station coordinates, names and IDs are missing - 681 cases\n\n\n\nMissing destination coordinates\n\nend_lat (n_missing = 681)\nend_lng (n_missing = 681)\n\nFiltering bike trips without destination coordinates:\n\nno_end_coord <- bike_rides_raw_06 |>\n  subset(is.na(end_lat) | is.na(end_lng))\n\nError in subset(bike_rides_raw_06, is.na(end_lat) | is.na(end_lng)): object 'bike_rides_raw_06' not found\n\nsetDT(no_end_coord)\n\nError: Cannot find symbol no_end_coord\n\n\nCan we link the missing destination coordinates to a specific user group?\n\ngg_miss_fct(no_end_coord, user_type)\n\nError in tbl_vars_dispatch(x): object 'no_end_coord' not found\n\n\nBoth groups have the same proportion of missing end station coordinates.\nCan we link the missing destination coordinates to a specific bike type?\n\ngg_miss_fct(no_end_coord, bike_type)\n\nError in tbl_vars_dispatch(x): object 'no_end_coord' not found\n\n\nThe lack of destination coordinates is linked to classic and docked bikes.\nCan we link the missing destination coordinates to a specific time period?\n\nno_end_coord |>\n  group_by(user_type, month) |>\n  summarise(number_of_rides = n(),\n            .groups = \"drop_last\") |>\n  ggplot(aes(month, number_of_rides, fill = user_type)) +\n  geom_col(alpha = .5) +\n  theme(\n    legend.position = \"right\",\n    legend.direction = \"vertical\"\n    ) +\n  theme(axis.text.x = element_text(angle = 60, hjust = 1))\n\nError in group_by(no_end_coord, user_type, month): object 'no_end_coord' not found\n\n\nWe can’t link the missing destination coordinates to a specific time period.\nTo sum up: We can’t interpret these rides without the destination coordinates. Most likely, the corrupted data is a result of a malfunction. The missing data can’t be reconstructed. These cases will therefore be deleted.\nSaving for documentation:\n\nfwrite(no_end_coord, \"~/R/case_study_cyclistic/05_deleted/no_end_coord.csv\")\n\nError in fwrite(no_end_coord, \"~/R/case_study_cyclistic/05_deleted/no_end_coord.csv\"): object 'no_end_coord' not found\n\n\nRemoving all bike trips without destination coordinates:\n\nbike_rides_raw_06 <- bike_rides_raw_06 |>\n  anti_join(no_end_coord, join_by(ride_id))\n\nError in anti_join(bike_rides_raw_06, no_end_coord, join_by(ride_id)): object 'bike_rides_raw_06' not found\n\n\n\n\nDeleted cases\nSummary of the deleted cases:\n\n\n\nCases\nNumber of cases\n\n\n\n\nfailed_trips\n134126\n\n\noutliers\n5309\n\n\nwarehouse_trips\n2098\n\n\nno_end_coord\n681\n\n\n\n\n\n\nSum\n142214\n\n\n\n\nnrow(failed_trips) + nrow(outliers) + nrow(warehouse_trips) + nrow(no_end_coord)\n\nError in nrow(failed_trips): object 'failed_trips' not found\n\n\n\nnrow(bike_rides_raw_05) - nrow(bike_rides_raw_06)\n\nError in nrow(bike_rides_raw_05): object 'bike_rides_raw_05' not found\n\n\n\n\nFilter missings\nFiltering cases with missing values:\n\nbike_rides_missing <- bike_rides_raw_06 |>\n  filter(!complete.cases(bike_rides_raw_06))\n\nError in filter(bike_rides_raw_06, !complete.cases(bike_rides_raw_06)): object 'bike_rides_raw_06' not found\n\n\nAt-a-glance ggplot of the missingness:\n\nvis_miss(slice_sample(bike_rides_missing, n = 50000), warn_large_data = FALSE)\n\nError in slice_sample(bike_rides_missing, n = 50000): object 'bike_rides_missing' not found\n\n## The size limit for vis_dat and vis_miss functions is 900,000 values,\n## which means we can only use a sample of our data for this visualization.\n\n\n\nCoordinates\nLet’s take a closer look at the coordinates belonging to the missing values.\n\nbike_rides_missing |>\n  select(start_station_name, start_station_id, end_station_name, end_station_id,\n         start_lat, start_lng, end_lat, end_lng) |>\n  head(10)\n\nError in select(bike_rides_missing, start_station_name, start_station_id, : object 'bike_rides_missing' not found\n\n\nObservations\n\nWhere station names are missing, the coordinates have fewer decimals (1-2 digits).\nIf you search for these coordinates in the Divvy map, no results are returned.\n\n\nLet’s try to find these coordinates in our stations data:\n\nfilter(stations, lat == 41.97 & lng == -87.71)\n\nError in filter(stations, lat == 41.97 & lng == -87.71): object 'stations' not found\n\n\nWe can find four different stations with four different IDs at lat = 41.97, lng = -87.71.\n\n\n\n\n\n\nNote\n\n\n\n\n\nDegree precision of latitude and longitude coordinates:\nPrecision can be measured by the number of decimal places in the latitude and longitude coordinates.\nTo identify stations accurately, we would need coordinates with 4-5 decimal places.\n\n\n\n\nKnowing this, I assume that I won’t be able to reconstruct the missing station names and IDs.\nWith 1,265,519 cases concerned, the question is: should I delete all these cases?\nFirst, I filtered out the inaccurate data and now I will check if the missing data can be linked to a specific variable.\nMy strategy is to delete only those cases that would distort our analysis.\n\n\nInvestigating the missingness\nCan the missing data be linked to a specific time period?\n\nbike_rides_missing |>\n  group_by(user_type, month) |>\n  summarise(number_of_rides = n(),\n            .groups = \"drop_last\") |>\n  ggplot(aes(month, number_of_rides, fill = user_type)) +\n  geom_col(alpha = .5) +\n  theme(\n    legend.position = \"right\",\n    legend.direction = \"vertical\"\n    ) +\n  theme(axis.text.x = element_text(angle = 60, hjust = 1))\n\nError in group_by(bike_rides_missing, user_type, month): object 'bike_rides_missing' not found\n\n\nOur graph shows that the missing data cannot be linked to a specific time period. It appears throughout the year.\nWould both groups of users be affected equally if we deleted all rows with missing values?\n\nbike_rides_missing |> \n  ggplot(aes(user_type)) +\n  geom_bar(alpha = .5) +\n  scale_y_continuous(labels = label_number())\n\nError in ggplot(bike_rides_missing, aes(user_type)): object 'bike_rides_missing' not found\n\n\nBoth group of users have missing values and members would be slightly more affected than casual users.\nCan the missing data be linked to a specific bike type?\n\nbike_rides_missing |> \n  group_by(bike_type, month) |>\n  summarise(number_of_rides = n(),\n            .groups = \"drop_last\") |>\n  ggplot(aes(month, number_of_rides, fill = bike_type)) +\n  geom_col(alpha = .5) +\n  theme(axis.text.x = element_text(angle = 60, hjust = 1))\n\nError in group_by(bike_rides_missing, bike_type, month): object 'bike_rides_missing' not found\n\n\nThere seems to be a clear link between missing data and electric bikes.\nAfter weighing the benefits and risks of deleting all cases with missing values, I decided not to remove these cases from our data table. It is not possible to identify the name of the start or end station of these trips, due to the imprecision of the coordinates, but deleting the more than 1 million observations concerned would bias the subsequent results of the analysis, as the deletion would adversely affect cyclist members and users who go for electric bicycles.\n\nfwrite(bike_rides_missing, \"~/R/case_study_cyclistic/04_backup/bike_rides_missing.csv\")\n\nError in fwrite(bike_rides_missing, \"~/R/case_study_cyclistic/04_backup/bike_rides_missing.csv\"): object 'bike_rides_missing' not found"
  },
  {
    "objectID": "projects/index.html#final-check",
    "href": "projects/index.html#final-check",
    "title": "Cyclistic Case Study",
    "section": "Final check",
    "text": "Final check\n\nglimpse(bike_rides_raw_06)\n\nError in glimpse(bike_rides_raw_06): object 'bike_rides_raw_06' not found\n\n\nTaking a peak at column names:\n\ncolnames(bike_rides_raw_06)\n\nError in is.data.frame(x): object 'bike_rides_raw_06' not found\n\n\nSelecting and reordering variables:\n\nbike_rides_clean <- subset(\n  bike_rides_raw_06, select = c(\"ride_id\", \"user_type\", \"bike_type\", \n                                \"travel_time\", \"date\", \"month\", \"day\", \n                                \"weekday\", \"hour\", \"time_of_day\", \n                                \"start_station_name\", \"end_station_name\",\n                                \"start_lat\", \"start_lng\", \"end_lat\", \"end_lng\"\n                                )\n  )\n\nError in subset(bike_rides_raw_06, select = c(\"ride_id\", \"user_type\", : object 'bike_rides_raw_06' not found\n\n\nChanging data types:\n\nbike_rides_clean$start_station_name <- as.factor(bike_rides_clean$start_station_name)\n\nError in is.factor(x): object 'bike_rides_clean' not found\n\nbike_rides_clean$end_station_name <- as.factor(bike_rides_clean$end_station_name)\n\nError in is.factor(x): object 'bike_rides_clean' not found\n\n\nSaving clean data:\n\nfwrite(bike_rides_clean, \"~/R/case_study_cyclistic/04_backup/bike_rides_clean.csv\")\n\nError in fwrite(bike_rides_clean, \"~/R/case_study_cyclistic/04_backup/bike_rides_clean.csv\"): object 'bike_rides_clean' not found"
  },
  {
    "objectID": "projects/index.html#limitations-of-the-data",
    "href": "projects/index.html#limitations-of-the-data",
    "title": "Cyclistic Case Study",
    "section": "Limitations of the data",
    "text": "Limitations of the data\n\n\n\n\n\n\nNote\n\n\n\nThe data has some limitations due to protection of user privacy:\n\nWe lack demographic data.\nThis means we can’t tell if a user is a local resident or a visitor.\nLikewise, we can’t link different bike rides to the same user.\nWe don’t know how many unique users are in the database.\nWe can’t tell how many bike trips can be linked to the same user.\nWe can’t tell if a casual user has bought a single ride pass or a day pass.\nDue to the imprecision of the coordinates, we have 1 265 519 cases with incomplete station identification."
  },
  {
    "objectID": "projects/index.html#descriptive-analysis",
    "href": "projects/index.html#descriptive-analysis",
    "title": "Cyclistic Case Study",
    "section": "Descriptive analysis",
    "text": "Descriptive analysis\n\nsummary(bike_rides_clean)\n\nError in summary(bike_rides_clean): object 'bike_rides_clean' not found\n\n\n\nTravel time\n\nfind_mode <- function(x) {\n  u <- unique(x)\n  tab <- tabulate(match(x, u))\n  u[tab == max(tab)]\n}\n\n\nmin(bike_rides_clean$travel_time)        #shortest ride\n\nError in eval(expr, envir, enclos): object 'bike_rides_clean' not found\n\nmax(bike_rides_clean$travel_time)        #longest ride\n\nError in eval(expr, envir, enclos): object 'bike_rides_clean' not found\n\nmean(bike_rides_clean$travel_time)       #straight average (total travel time / rides)\n\nError in mean(bike_rides_clean$travel_time): object 'bike_rides_clean' not found\n\nmedian(bike_rides_clean$travel_time)     #midpoint number in the ascending array of travel times\n\nError in median(bike_rides_clean$travel_time): object 'bike_rides_clean' not found\n\nfind_mode(bike_rides_clean$travel_time)  #the value that occurs most often\n\nError in unique(x): object 'bike_rides_clean' not found\n\nsd(bike_rides_clean$travel_time)         #standard deviation (how dispersed the data is in relation to the mean)\n\nError in is.data.frame(x): object 'bike_rides_clean' not found\n\n\n\nShortest ride: 1.02 min.\nLongest ride: 1439.37 min.\nAverage ride: 16.212 min.\nMedian: 10.27 min.\nMode: 5.38 min.\nStandard deviation: 28.42452 min."
  },
  {
    "objectID": "projects/index.html#comparing-members-and-casual-users",
    "href": "projects/index.html#comparing-members-and-casual-users",
    "title": "Cyclistic Case Study",
    "section": "Comparing members and casual users",
    "text": "Comparing members and casual users\n\nNumber of rides\n\n\nShow the code\nbike_rides_clean |>\n  count(user_type)\n\n\n\n?(caption)\n\n\n\nError in count(bike_rides_clean, user_type): object 'bike_rides_clean' not found\n\n\n\n\n\n\nShow the code\nbike_rides_clean |>\n  group_by(user_type) |>\n  summarise(number_of_rides = n(), .groups = \"drop_last\") |>\n  ggplot(aes(number_of_rides, user_type, fill = user_type)) +\n  geom_bar(\n    stat = \"identity\",\n    alpha = .5\n    )  +\n  scale_fill_manual(\n    values = c(\"#cf385b\", \"#0CF0BB\"),\n    labels = c(\"Member\", \"Casual\")\n    ) +\n  scale_x_continuous(labels = label_number()) +\n  scale_y_discrete(labels = c(\"Member\", \"Casual\")) +\n  theme_fivethirtyeight() +\n  theme(panel.background = element_rect(fill = \"white\"),\n        legend.position = \"none\") +\n  labs(x = NULL,\n       y = NULL,\n       title = \"Number of rides per user group\",\n       subtitle = \"Based on data from 1 April 2022 to 31 March 2023\")\n\n\nError in group_by(bike_rides_clean, user_type): object 'bike_rides_clean' not found\n\n\nBetween 1 April 2022 and 31 March 2023, casual users made 2,280,849 bike rentals, while members used the bike sharing service 3,380,657 times.\n\n\n\n\n\n\nNote\n\n\n\nAs mentioned above, due to protection of user privacy, we can’t link different bike trips to the same user, so we can’t say how many trips one user makes on average during different time units.\n\n\n\n\nBike preferences\n\n\nShow the code\nbike_rides_clean |>\n  group_by(user_type, bike_type) |>\n  summarise(number_of_rides = n(),\n            percentage = round(100 * n() / nrow(bike_rides_clean), 1),\n            .groups = \"drop_last\") |>\n  arrange(desc(percentage))\n\n\n\n?(caption)\n\n\n\nError in group_by(bike_rides_clean, user_type, bike_type): object 'bike_rides_clean' not found\n\n\n\n\n\n\nShow the code\nbike_rides_clean |>  \n    group_by(user_type) |> \n    mutate(user_count = n()) |>  \n    group_by(bike_type, user_count, .add = TRUE) |>  \n    summarise(\n        bike_count = n(), \n        bike_pctg = round(bike_count / first(user_count) * 100, 1),\n        .groups = \"drop_last\")\n\n\n\n?(caption)\n\n\n\nError in group_by(bike_rides_clean, user_type): object 'bike_rides_clean' not found\n\n\n\n\n\n\nShow the code\nbike_rides_clean |>\n  ggplot(aes(user_type, fill = bike_type)) +\n  geom_bar(position = \"fill\",\n           alpha = .5) +\n  scale_fill_manual(\n    name = \"Bike type\",\n    values = c(\"#ffb635\", \"#bb2649\", \"#ad93b4\"),\n    labels = c(\"Classic bike\", \"Docked bike\", \"Electric bike\")\n    ) +\n  scale_y_continuous(labels = label_percent()) +\n  scale_x_discrete(labels = c(\"Casual\", \"Member\")) +\n  theme_fivethirtyeight() +\n  theme(\n    panel.background = element_rect(fill = \"white\"),\n    legend.position = \"right\",\n    legend.direction = \"vertical\"\n    ) +\n  labs(\n    title = \"Bike preference\",\n    subtitle = \"Based on data from 1 April 2022 to 31 March 2023\"\n    )\n\n\nError in ggplot(bike_rides_clean, aes(user_type, fill = bike_type)): object 'bike_rides_clean' not found\n\n\nThere is no clear distinction between the two groups in terms of bike choice. What you can see from the graph is that members tend to avoid docked bikes, choosing classic bikes half the time (51.4%) and electric bikes the other half (48.6%). Casual users ride electric bikes 53.9% of the time, classic bikes 38.5% and docked bikes only 7.5% of the time.\n\n\nAverage travel times\n\n\nShow the code\nbike_rides_clean |>\n  group_by(user_type) |>\n  summarise(average_travel_time = mean(travel_time)) |>\n  ungroup()\n\n\n\n?(caption)\n\n\n\nError in group_by(bike_rides_clean, user_type): object 'bike_rides_clean' not found\n\n\n\n\n\n\nShow the code\nbike_rides_clean |>\n  group_by(user_type) |>\n  summarise(average_travel_time = mean(travel_time)) |>\n  ggplot(aes(average_travel_time, user_type, fill = user_type)) +\n  geom_col(alpha = .5) +\n  scale_fill_manual(\n    values = c(\"#BA2649\", \"#CEC2AE\"),\n    labels = c(\"Member\", \"Casual\")\n    ) +\n  scale_y_discrete(labels = c(\"Casual\", \"Member\")) +\n  theme_fivethirtyeight() +\n  theme(\n    panel.background = element_rect(fill = \"white\"),\n    legend.position = \"none\"\n    ) +\n  labs(\n    x = \"Average travel time in minutes\",\n    y = NULL,\n    title = \"Average travel time in minutes by user groups\",\n    subtitle = \"Based on data from 1 April 2022 to 31 March 2023\"\n    )\n\n\nError in group_by(bike_rides_clean, user_type): object 'bike_rides_clean' not found\n\n\nMembers spend an average of 12.47 minutes on their bikes, while casual users cycle for an average of 21.75 minutes. The difference in average travel time between the two groups is 9.28 minutes.\n\n\nCycling habits throughout the year\n\n\nShow the code\nbike_rides_clean |>\n  group_by(user_type, date) |>\n  summarise(number_of_rides = n(), .groups = \"drop_last\") |>\n  arrange(desc(number_of_rides)) |>\n  head()\n\n\n\n?(caption)\n\n\n\nError in group_by(bike_rides_clean, user_type, date): object 'bike_rides_clean' not found\n\n\n\n\n\n\nShow the code\nbike_rides_clean |>\n  group_by(user_type, date) |>\n  summarise(number_of_rides = n(), .groups = \"drop_last\") |>\n  ggplot(aes(date, number_of_rides, color = user_type)) +\n  geom_line() +\n  scale_color_manual(\n    name = \"User\",\n    values = c(\"#cf385b\", \"#0CF0BB\"),\n    labels = c(\"Member\", \"Casual\")\n    ) +\n  scale_x_date(\n    breaks = breaks_width(\"1 month\"),\n    limits = c(as.Date(\"2022-04-01\"),as.Date(\"2023-03-31\")),\n    labels = label_date_short()\n    ) +\n  theme_fivethirtyeight() +\n  theme(\n    panel.background = element_rect(fill = \"white\"),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\"\n    ) +\n  labs(\n    x = NULL,\n    y = NULL,\n    title = \"Cycling habits throughout the year\",\n    subtitle = \"Based on data from 1 April 2022 to 31 March 2023\"\n    )\n\n\nError in group_by(bike_rides_clean, user_type, date): object 'bike_rides_clean' not found\n\n\nBoth groups showed fairly similar cycling patterns over the past year. As expected, the increase in numbers followed the change of the seasons with members cycling more in the colder months than casuals.\n\n\nCycling patterns during the week\n\n\nShow the code\nbike_rides_clean |>\n  group_by(user_type, weekday) |>       \n  summarise(number_of_rides = n(),           \n            average_travel_time = mean(travel_time),\n            .groups = \"drop_last\") |>   \n  arrange(desc(average_travel_time))\n\n\n\n?(caption)\n\n\n\nError in group_by(bike_rides_clean, user_type, weekday): object 'bike_rides_clean' not found\n\n\n\n\n\n\nShow the code\nbike_rides_clean |> \n  group_by(user_type, weekday) |>\n  summarise(number_of_rides = n(),\n            .groups = \"drop_last\") |>\n  ggplot(aes(weekday, number_of_rides, fill = user_type)) +\n  geom_col(position = \"dodge\", alpha = .5) +\n  scale_fill_manual(\n    values = c(\"#cf385b\", \"#0CF0BB\"),\n    labels = c(\"Casual\", \"Member\"),\n    name = \"User\"\n    ) +\n  scale_y_continuous(labels = label_number()) +\n  theme_fivethirtyeight() +\n  theme(\n    panel.background = element_rect(fill = \"white\"),\n    legend.position = \"right\",\n    legend.direction = \"vertical\"\n    ) +\n  labs(\n    x = NULL,\n    y = NULL,\n    title = \"Number of rides by user group and day of the week\",\n    subtitle = \"Based on data from 1 April 2022 to 31 March 2023\"\n    )\n\n\nError in group_by(bike_rides_clean, user_type, weekday): object 'bike_rides_clean' not found\n\n\nThe graph shows a clear difference between the two groups: Members use the service more on weekdays, with peak usage on Tuesday, Wednesday and Thursday, and a decrease from Friday onwards.\nIn contrast, casual users tend to make more trips from Thursday onwards and peak on the weekend.\n\n\nDaily average travel time\n\n\nShow the code\nbike_rides_clean |>\n  group_by(user_type, weekday) |>\n  summarise(number_of_rides = n(),\n            average_travel_time = mean(travel_time),\n            .groups = \"drop_last\") |>\n  arrange(desc(average_travel_time))\n\n\n\n?(caption)\n\n\n\nError in group_by(bike_rides_clean, user_type, weekday): object 'bike_rides_clean' not found\n\n\n\n\n\n\nShow the code\nbike_rides_clean |>\n  group_by(user_type, weekday) |>\n  summarise(number_of_rides = n(),\n            average_travel_time = mean(travel_time),\n            .groups = \"drop_last\") |>\n  ggplot(aes(weekday, average_travel_time, fill = user_type)) +\n  geom_col(position = \"dodge\", alpha = .5) +\n  ##geom_hline(aes(\n    ##yintercept = 16.59,\n    ##linetype = \"Average travel time\"), \n    ##color = \"#ffb635\",\n    ##lwd = 1.5,\n    ##) +\n  scale_fill_manual(\n    values = c(\"#BA2649\", \"#CEC2AE\"),\n    labels = c(\"Casual\", \"Member\"),\n    name = \"User\"\n    ) +\n  scale_y_continuous(\n    labels = label_number(),\n    ) +\n  theme_fivethirtyeight() +\n  theme(\n    panel.background = element_rect(fill = \"white\"),\n    legend.position = \"right\",\n    legend.direction = \"vertical\",\n    axis.title = element_text(),\n    axis.title.x = element_blank()\n    ) +\n  labs(\n    title = \"Average travel time by day of the week\",\n    subtitle = \"Based on data from 1 April 2022 to 31 March 2023\"\n    ) +\n  ylab(\"Average travel time in minutes\")\n\n\nError in group_by(bike_rides_clean, user_type, weekday): object 'bike_rides_clean' not found\n\n\nWe already saw that members make more trips than casual users but they spend less time on their bikes, while casuals do the opposite, they start less rides, but spend more time cycling.\nWe can also spot that the average travel time for members is fairly consistent, with no major fluctuations throughout the week, while casuals have a bigger rise in their average times at weekends and on Mondays.\n\n\nTime of the day\n\n\nShow the code\nbike_rides_clean |>\n  group_by(time_of_day, user_type) |>   # groups by user type and time of day\n  summarise(number_of_rides = n(),\n            .groups = \"drop_last\") |>   # calculates the number of rides\n  arrange(desc(number_of_rides))          # sorts by number of rides\n\n\n\n?(caption)\n\n\n\nError in group_by(bike_rides_clean, time_of_day, user_type): object 'bike_rides_clean' not found\n\n\n\n\n\n\nShow the code\nbike_rides_clean |> \n  group_by(time_of_day, user_type) |>\n  summarise(number_of_rides = n(),\n            .groups = \"drop_last\") |>\n  ggplot(aes(\n    number_of_rides,\n    time_of_day,\n    fill = user_type)\n    ) +\n  geom_col(position = \"dodge\", alpha = .5) +\n  scale_fill_manual(\n    values = c(\"#cf385b\", \"#0CF0BB\"),\n    labels = c(\"Casual\", \"Member\"),\n    name = \"User\"\n    ) +\n  scale_y_discrete(\n    limits = rev(levels(bike_rides_clean$time_of_day))\n    ) +\n  theme_fivethirtyeight() +\n  theme(\n    panel.background = element_rect(fill = \"white\"),\n    legend.position = \"right\",\n    legend.direction = \"vertical\"\n    ) +\n  labs(\n    title = \"Number of rides by user group and time of day\",\n    subtitle = \"Based on data from 1 April 2022 to 31 March 2023\"\n    )\n\n\nError in group_by(bike_rides_clean, time_of_day, user_type): object 'bike_rides_clean' not found\n\n\nThis graph shows how cycling patterns change throughout the day. The afternoon rush hour is when most people from both groups get on the bikes.\nOne might think that the majority of members would cycle to work in the morning and then cycle home in the afternoon, but our data suggest that morning cycling is far less popular than afternoon cycling.\nUnlike members, casual users prefer to skip the morning rush and cycle in the afternoon and evening hours instead\n\n\nAverage travel time by time of day\n\n\nShow the code\nbike_rides_clean |> \n  group_by(time_of_day, user_type) |>\n  summarise(average_travel_time = mean(travel_time),\n            .groups = \"drop_last\") |>\n  ggplot(aes(\n    average_travel_time,\n    time_of_day,\n    fill = user_type)\n    ) +\n  geom_col(position = \"dodge\", alpha = .5) +\n  scale_fill_manual(\n    values = c(\"#BA2649\", \"#CEC2AE\"),\n    labels = c(\"Casual\", \"Member\"),\n    name = \"User\"\n    ) +\n  scale_y_discrete(\n    limits = rev(levels(bike_rides_clean$time_of_day))\n    ) +\n  theme_fivethirtyeight() +\n  theme(\n    panel.background = element_rect(fill = \"white\"),\n    legend.position = \"right\",\n    legend.direction = \"vertical\"\n    ) +\n  labs(\n    title = \"Average travel time by user group and time of day\",\n    subtitle = \"Based on data from 1 April 2022 to 31 March 2023\"\n    ) +\n  xlab(\"Average travel time in minutes\")\n\n\nError in group_by(bike_rides_clean, time_of_day, user_type): object 'bike_rides_clean' not found\n\n\nThe last two graphs also confirm that members take more trips, while casual users spend more time cycling.\n\n\nNumber of rides per hour started\n\n\nShow the code\nbike_rides_clean |>\n  group_by(hour, user_type) |>          # groups by user type and hour\n  summarise(number_of_rides = n(),\n            .groups = \"drop_last\") |>   # calculates the number of rides\n  arrange(desc(number_of_rides)) |>     # sorts by number of rides\n  head()\n\n\n\n?(caption)\n\n\n\nError in group_by(bike_rides_clean, hour, user_type): object 'bike_rides_clean' not found\n\n\n\n\n\n\nShow the code\nbike_rides_clean |> \n  group_by(user_type, hour) |>\n  summarise(number_of_rides = n(),\n            .groups = \"drop_last\") |>\n  ggplot(aes(hour, number_of_rides, fill = user_type)) +\n  geom_col(position = \"dodge\", alpha = .5) +\n  scale_fill_manual(\n    values = c(\"#cf385b\", \"#0CF0BB\"),\n    labels = c(\"Casual\", \"Member\"),\n    name = \"User\"\n    ) +\n  scale_x_continuous(breaks = c(8, 17)) +\n  scale_y_continuous(labels = label_number()) +\n  theme_fivethirtyeight() +\n  theme(\n    panel.background = element_rect(fill = \"white\"),\n    legend.position = \"right\",\n    legend.direction = \"vertical\"\n    ) +\n  labs(\n    x = NULL,\n    y = NULL,\n    title = \"Number of rides per hour started\",\n    subtitle = \"Based on data from 1 April 2022 to 31 March 2023\"\n    )\n\n\nError in group_by(bike_rides_clean, user_type, hour): object 'bike_rides_clean' not found\n\n\nWhen analysing the time of day at which users started their trips, both groups show similar habits. The peak hour of the day is around 5pm for both groups, but members also tend to have a peak in the morning around 8am."
  },
  {
    "objectID": "projects/cyclistic/index.html",
    "href": "projects/cyclistic/index.html",
    "title": "Cyclistic Case Study",
    "section": "",
    "text": "According to the Meddin bike-sharing map, bike-sharing systems are present in 1,590 cities, in 92 countries and on every continent (except Antarctica). In April 2023, the world had 1,914 systems in operation with a fleet of 8,980,314 bikes. For the latest industry trends, read The Meddin Bike-sharing World Map Report. The origins of bike-sharing can be traced back to grassroots efforts in the Netherlands in the mid-1960s. For more historical context, see Bloomberg.\n\n\n\nCyclistic is a (fictional) bike-share company launched in 2016. It operates a fleet of 5,824 bikes that are geotracked and locked into a network of 1419 stations across Chicago. The bikes can be unlocked from one station and returned to any other station in the system at any time."
  },
  {
    "objectID": "projects/cyclistic/index.html#the-focus-of-the-analysis",
    "href": "projects/cyclistic/index.html#the-focus-of-the-analysis",
    "title": "Cyclistic Case Study",
    "section": "The focus of the analysis",
    "text": "The focus of the analysis\nAnalysing historical bike trip data to identify trends that can guide Cyclistic’s future marketing program."
  },
  {
    "objectID": "projects/cyclistic/index.html#business-questions",
    "href": "projects/cyclistic/index.html#business-questions",
    "title": "Cyclistic Case Study",
    "section": "Business Questions",
    "text": "Business Questions\nIn what ways do annual members and casual riders use Cyclistic bikes differently?\n\nWhat time of the day/week/month/year do members and casual riders use the service?\nDo members and casual users differ in the time they spend cycling?\nWhat types of bikes do members and casual users prefer?\nAre there any other differences that can help us better understand the needs of occasional and year-round users?"
  },
  {
    "objectID": "projects/cyclistic/index.html#data-sources",
    "href": "projects/cyclistic/index.html#data-sources",
    "title": "Cyclistic Case Study",
    "section": "Data Sources",
    "text": "Data Sources\nThe dataset is acquired from Divvy’s public data and made available by Motivate International Inc. under this license. It includes bike rides between 1 April 2022 and 31 March 2023."
  },
  {
    "objectID": "projects/cyclistic/index.html#data-credibility",
    "href": "projects/cyclistic/index.html#data-credibility",
    "title": "Cyclistic Case Study",
    "section": "Data Credibility",
    "text": "Data Credibility\n\nReliable: Lyft Bikes and Scooters, LLC (Bikeshare) operates the City of Chicago’s Divvy bicycle sharing service. Bikeshare makes certain Divvy system data owned by the City available to the public. The City of Chicago owns all right, title, and interest in the Data.\nOriginal: the data is collected by the Divvy systems\nComprehensive: the data contains all critical information needed to answer the business question\nCurrent: the data covers the last 12 month\nCited: the data is collected and maintained by a credible organization\nComplies with Data Privacy: the data is anonymised and does not contain any personally identifiable information\nUnbiased: contains data that is representative of all users of the bike share service"
  },
  {
    "objectID": "projects/cyclistic/index.html#downloading-and-storing-the-data",
    "href": "projects/cyclistic/index.html#downloading-and-storing-the-data",
    "title": "Cyclistic Case Study",
    "section": "Downloading and storing the data",
    "text": "Downloading and storing the data\n\nDownloaded the data that covers the last 12 month from: Divvy’s public historical trip data\nUnzipped the files\nOpened the csv files one-by-one in Excel for exploration\nAssessed the number of variables and the length of the data and decided to continue the data processing in RStudio"
  },
  {
    "objectID": "projects/cyclistic/index.html#library-and-setup",
    "href": "projects/cyclistic/index.html#library-and-setup",
    "title": "Cyclistic Case Study",
    "section": "Library and Setup",
    "text": "Library and Setup\n\nSys.setlocale(\"LC_ALL\",\"English\")\n\n[1] \"LC_COLLATE=English_United States.1252;LC_CTYPE=English_United States.1252;LC_MONETARY=English_United States.1252;LC_NUMERIC=C;LC_TIME=English_United States.1252\"\n\n\nRequired packages:\n\npacman::p_load(\n  data.table,   ## fread function\n  skimr,        ## summary statistics\n  writexl,      ## xlsx exporter\n  tidyverse,    ## data cleaning and manipulation\n  janitor,      ## data cleaning\n  naniar,       ## exploring missing data\n  visdat,       ## visualization of missing data\n  ggplot2,      ## visualization\n  paletteer,    ## color palettes\n  scales,       ## scaling\n  ggthemes,     ## extra themes for plotting\n  gt,           ## making tables\n  knitr,        ## report generation\n  leaflet,      ## interactive maps\n  widgetframe   ## responsive iFrame\n)"
  },
  {
    "objectID": "projects/cyclistic/index.html#loading-the-data",
    "href": "projects/cyclistic/index.html#loading-the-data",
    "title": "Cyclistic Case Study",
    "section": "Loading the data",
    "text": "Loading the data\nReading data from multiple files:\n\nbike_rides_raw &lt;-\n  list.files(path = \"~/R/website/projects/cyclistic\", pattern = \"*.csv\") |&gt;\n  map(~ fread(., data.table = TRUE, header = TRUE, fill = FALSE, \n              showProgress = TRUE, na.strings = c(\"\",NA))\n      ) |&gt;\n  bind_rows()"
  },
  {
    "objectID": "projects/cyclistic/index.html#exploration",
    "href": "projects/cyclistic/index.html#exploration",
    "title": "Cyclistic Case Study",
    "section": "Exploration",
    "text": "Exploration\n\nclass(bike_rides_raw)\n\n[1] \"data.table\" \"data.frame\"\n\n\n\nsetkey(bike_rides_raw, ride_id)\n\nHaving a glimpse at the data:\n\nglimpse(bike_rides_raw)\n\nRows: 5,803,720\nColumns: 13\n$ ride_id            &lt;chr&gt; \"00000179CF2C4FB5\", \"0000038F578A7278\", \"0000047373~\n$ rideable_type      &lt;chr&gt; \"electric_bike\", \"electric_bike\", \"electric_bike\", ~\n$ started_at         &lt;dttm&gt; 2022-07-28 09:02:27, 2022-12-15 15:36:06, 2022-07-~\n$ ended_at           &lt;dttm&gt; 2022-07-28 09:13:51, 2022-12-15 15:44:35, 2022-07-~\n$ start_station_name &lt;chr&gt; \"Ellis Ave & 55th St\", \"Lakeview Ave & Fullerton Pk~\n$ start_station_id   &lt;chr&gt; \"KA1504000076\", \"TA1309000019\", \"13022\", \"13193\", N~\n$ end_station_name   &lt;chr&gt; \"Ellis Ave & 55th St\", \"Clark St & Elm St\", \"Calume~\n$ end_station_id     &lt;chr&gt; \"KA1504000076\", \"TA1307000039\", \"13102\", \"TA1305000~\n$ start_lat          &lt;dbl&gt; 41.79424, 41.92583, 41.89221, 41.92185, 41.90000, 4~\n$ start_lng          &lt;dbl&gt; -87.60134, -87.63882, -87.61183, -87.64402, -87.690~\n$ end_lat            &lt;dbl&gt; 41.79430, 41.90297, 41.85761, 41.90312, 41.91000, 4~\n$ end_lng            &lt;dbl&gt; -87.60145, -87.63128, -87.61941, -87.67394, -87.690~\n$ member_casual      &lt;chr&gt; \"casual\", \"casual\", \"casual\", \"casual\", \"member\", \"~\n\n\nChecking the summary statistics:\n\nsummary(bike_rides_raw)\n\n   ride_id          rideable_type        started_at                    \n Length:5803720     Length:5803720     Min.   :2022-04-01 00:01:48.00  \n Class :character   Class :character   1st Qu.:2022-06-18 23:27:00.25  \n Mode  :character   Mode  :character   Median :2022-08-13 11:37:32.00  \n                                       Mean   :2022-08-25 07:04:55.95  \n                                       3rd Qu.:2022-10-14 18:04:21.00  \n                                       Max.   :2023-03-31 23:59:28.00  \n                                                                       \n    ended_at                      start_station_name start_station_id  \n Min.   :2022-04-01 00:02:15.00   Length:5803720     Length:5803720    \n 1st Qu.:2022-06-18 23:51:55.75   Class :character   Class :character  \n Median :2022-08-13 12:00:07.50   Mode  :character   Mode  :character  \n Mean   :2022-08-25 07:23:54.70                                        \n 3rd Qu.:2022-10-14 18:19:10.25                                        \n Max.   :2023-04-03 11:41:11.00                                        \n                                                                       \n end_station_name   end_station_id       start_lat       start_lng     \n Length:5803720     Length:5803720     Min.   :41.64   Min.   :-87.84  \n Class :character   Class :character   1st Qu.:41.88   1st Qu.:-87.66  \n Mode  :character   Mode  :character   Median :41.90   Median :-87.64  \n                                       Mean   :41.90   Mean   :-87.65  \n                                       3rd Qu.:41.93   3rd Qu.:-87.63  \n                                       Max.   :42.07   Max.   :-87.52  \n                                                                       \n    end_lat         end_lng       member_casual     \n Min.   : 0.00   Min.   :-88.14   Length:5803720    \n 1st Qu.:41.88   1st Qu.:-87.66   Class :character  \n Median :41.90   Median :-87.64   Mode  :character  \n Mean   :41.90   Mean   :-87.65                     \n 3rd Qu.:41.93   3rd Qu.:-87.63                     \n Max.   :42.37   Max.   :  0.00                     \n NA's   :5855    NA's   :5855                       \n\n\nLooking for duplicates:\n\nsum(duplicated(bike_rides_raw))\n\n[1] 0\n\n\nSkimming the data table:\n\nskim_without_charts(bike_rides_raw)\n\n\nData summary\n\n\nName\nbike_rides_raw\n\n\nNumber of rows\n5803720\n\n\nNumber of columns\n13\n\n\nKey\nride_id\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n7\n\n\nnumeric\n4\n\n\nPOSIXct\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nride_id\n0\n1.00\n16\n16\n0\n5803720\n0\n\n\nrideable_type\n0\n1.00\n11\n13\n0\n3\n0\n\n\nstart_station_name\n839082\n0.86\n7\n64\n0\n1699\n0\n\n\nstart_station_id\n839214\n0.86\n3\n36\n0\n1315\n0\n\n\nend_station_name\n896319\n0.85\n9\n64\n0\n1723\n0\n\n\nend_station_id\n896460\n0.85\n3\n36\n0\n1320\n0\n\n\nmember_casual\n0\n1.00\n6\n6\n0\n2\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\n\n\n\n\nstart_lat\n0\n1\n41.90\n0.05\n41.64\n41.88\n41.90\n41.93\n42.07\n\n\nstart_lng\n0\n1\n-87.65\n0.03\n-87.84\n-87.66\n-87.64\n-87.63\n-87.52\n\n\nend_lat\n5855\n1\n41.90\n0.07\n0.00\n41.88\n41.90\n41.93\n42.37\n\n\nend_lng\n5855\n1\n-87.65\n0.11\n-88.14\n-87.66\n-87.64\n-87.63\n0.00\n\n\n\nVariable type: POSIXct\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nmedian\nn_unique\n\n\n\n\nstarted_at\n0\n1\n2022-04-01 00:01:48\n2023-03-31 23:59:28\n2022-08-13 11:37:32\n4874281\n\n\nended_at\n0\n1\n2022-04-01 00:02:15\n2023-04-03 11:41:11\n2022-08-13 12:00:07\n4887969"
  },
  {
    "objectID": "projects/cyclistic/index.html#data-description",
    "href": "projects/cyclistic/index.html#data-description",
    "title": "Cyclistic Case Study",
    "section": "Data Description",
    "text": "Data Description\nThe raw data set contains data on 5,803,720 bike rides along 13 variables:\n\nride_id &lt;chr&gt; : a 16-digit unique trip identifier, consisting of letters and numbers\nrideable_type &lt;chr&gt; : type of bike, assuming one of three categories:\n\nclassic_bike\ndocked_bike\nelectric_bike\n\nstarted_at &lt;dttm&gt; : the start date and time of the trip\nended_at &lt;dttm&gt; : the end date and time of the trip\nstart_station_name &lt;chr&gt; : the name of the station from which the bike trip started\nstart_station_id &lt;chr&gt; : the ID of the station from which the bike trip started\nend_station_name &lt;chr&gt; : the name of the station where the bike trip ended\nend_station_id &lt;chr&gt; : the ID of the station where the bike trip ended\nstart_lat &lt;dbl&gt; : start latitude, ranges between 41.64 and 42.07 degrees\nstart_lng &lt;dbl&gt; : start longitude, ranges between -87.84 and -87.52 degrees\nend_lat &lt;dbl&gt; : end latitude, ranges between 0.00 and 42.37 degrees\nend_lng &lt;dbl&gt; : end longitude, ranges between -88.14 and 0.00 degrees\nmember_casual &lt;chr&gt; : type of user, assuming one of two categories:\n\nmember\ncasual"
  },
  {
    "objectID": "projects/cyclistic/index.html#observations",
    "href": "projects/cyclistic/index.html#observations",
    "title": "Cyclistic Case Study",
    "section": "Observations",
    "text": "Observations\n\nBlank cells and missing data to check:\n\nstart_station_name (n_empty=839082)\nstart_station_id (n_empty=839214)\nend_station_name (n_empty=896319)\nend_station_id (n_empty=896460)\nend_lat (n_missing=5855)\nend_lng (n_missing=5855)\n\nInconsistent number of decimals to check:\n\nstart_lat\nstart_lng\nend_lat\neng_lng\n\nOutlying data to check: end_lat=0.00, end_lng=0.00\nData type - string to factor:\n\nrideable_type\nmember_casual\nstart_station_name\nend_station_name\n\n\nExporting a backup file before going on with data cleaning:\n\nfwrite(bike_rides_raw, \"~/R/backup/cyclistic/bike_rides_raw_01.csv\")"
  },
  {
    "objectID": "projects/cyclistic/index.html#variable-names",
    "href": "projects/cyclistic/index.html#variable-names",
    "title": "Cyclistic Case Study",
    "section": "Variable names",
    "text": "Variable names\nColumn names:\n\ncolnames(bike_rides_raw)\n\n [1] \"ride_id\"            \"rideable_type\"      \"started_at\"        \n [4] \"ended_at\"           \"start_station_name\" \"start_station_id\"  \n [7] \"end_station_name\"   \"end_station_id\"     \"start_lat\"         \n[10] \"start_lng\"          \"end_lat\"            \"end_lng\"           \n[13] \"member_casual\"     \n\n\nRenaming variables:\n\nbike_rides_raw &lt;- bike_rides_raw |&gt; \n  rename(\n    bike_type = rideable_type,\n    start_time = started_at,\n    end_time = ended_at,\n    user_type = member_casual\n  )\n\ncolnames(bike_rides_raw)\n\n [1] \"ride_id\"            \"bike_type\"          \"start_time\"        \n [4] \"end_time\"           \"start_station_name\" \"start_station_id\"  \n [7] \"end_station_name\"   \"end_station_id\"     \"start_lat\"         \n[10] \"start_lng\"          \"end_lat\"            \"end_lng\"           \n[13] \"user_type\""
  },
  {
    "objectID": "projects/cyclistic/index.html#data-types",
    "href": "projects/cyclistic/index.html#data-types",
    "title": "Cyclistic Case Study",
    "section": "Data types",
    "text": "Data types\nEnsuring that each column has the correct data type:\n\nstr(bike_rides_raw)\n\nClasses 'data.table' and 'data.frame':  5803720 obs. of  13 variables:\n $ ride_id           : chr  \"00000179CF2C4FB5\" \"0000038F578A7278\" \"0000047373295F85\" \"000004C3185FDDE9\" ...\n $ bike_type         : chr  \"electric_bike\" \"electric_bike\" \"electric_bike\" \"electric_bike\" ...\n $ start_time        : POSIXct, format: \"2022-07-28 09:02:27\" \"2022-12-15 15:36:06\" ...\n $ end_time          : POSIXct, format: \"2022-07-28 09:13:51\" \"2022-12-15 15:44:35\" ...\n $ start_station_name: chr  \"Ellis Ave & 55th St\" \"Lakeview Ave & Fullerton Pkwy\" \"Streeter Dr & Grand Ave\" \"Larrabee St & Webster Ave\" ...\n $ start_station_id  : chr  \"KA1504000076\" \"TA1309000019\" \"13022\" \"13193\" ...\n $ end_station_name  : chr  \"Ellis Ave & 55th St\" \"Clark St & Elm St\" \"Calumet Ave & 18th St\" \"Honore St & Division St\" ...\n $ end_station_id    : chr  \"KA1504000076\" \"TA1307000039\" \"13102\" \"TA1305000034\" ...\n $ start_lat         : num  41.8 41.9 41.9 41.9 41.9 ...\n $ start_lng         : num  -87.6 -87.6 -87.6 -87.6 -87.7 ...\n $ end_lat           : num  41.8 41.9 41.9 41.9 41.9 ...\n $ end_lng           : num  -87.6 -87.6 -87.6 -87.7 -87.7 ...\n $ user_type         : chr  \"casual\" \"casual\" \"casual\" \"casual\" ...\n - attr(*, \".internal.selfref\")=&lt;externalptr&gt; \n - attr(*, \"sorted\")= chr \"ride_id\"\n\n\nChanging data types from string to factor where variables represent categorical data:\n\nbike_rides_raw$bike_type &lt;- as.factor(bike_rides_raw$bike_type)\nbike_rides_raw$user_type &lt;- as.factor(bike_rides_raw$user_type)"
  },
  {
    "objectID": "projects/cyclistic/index.html#incorrect-data",
    "href": "projects/cyclistic/index.html#incorrect-data",
    "title": "Cyclistic Case Study",
    "section": "Incorrect data",
    "text": "Incorrect data\nLet’s find out if there are any misspellings, incorrect naming or other types of errors in our data.\n\nDivvy Bicycle Stations\nOfficial Divvy stations data is available at this link.\n\ndivvy_stations &lt;- read_csv(\"~/R/divvy/Divvy_Bicycle_Stations.csv\")\n\nRows: 1419 Columns: 8\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr (3): Station Name, Status, Location\ndbl (5): ID, Total Docks, Docks in Service, Latitude, Longitude\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nSelecting variables for comparison:\n\ndivvy_stations &lt;- divvy_stations |&gt;\n  select(ID, station_name = \"Station Name\", Latitude, Longitude) |&gt;\n  unite(\n    col = Location,\n    Latitude, Longitude,\n    sep = \", \"\n  )\n\nAccording to Divvy, their system has 1419 unique stations.\nFiltering all unique start station names and IDs in our data table:\n\nstart_stations &lt;- bike_rides_raw |&gt;\n  mutate(across(c(start_lat, start_lng), ~ round(., 5))) |&gt;\n  distinct(start_station_name, start_station_id, start_lat, start_lng) |&gt;\n  filter(!is.na(start_station_name) | !is.na(start_station_id)) |&gt;\n  select(station_name = start_station_name, station_id = start_station_id, lat = start_lat, lng = start_lng)\n\nhead(start_stations)\n\n\n\n\n\nstation_name\nstation_id\nlat\nlng\n\n\n\n\nEllis Ave & 55th St\nKA1504000076\n41.79424\n-87.60134\n\n\nLakeview Ave & Fullerton Pkwy\nTA1309000019\n41.92583\n-87.63882\n\n\nStreeter Dr & Grand Ave\n13022\n41.89221\n-87.61183\n\n\nLarrabee St & Webster Ave\n13193\n41.92185\n-87.64402\n\n\nRacine Ave & Belmont Ave\nTA1308000019\n41.93965\n-87.65887\n\n\nWells St & Elm St\nKA1504000135\n41.90316\n-87.63478\n\n\n\n\n\n\nFiltering all unique end station names and IDs in our data table:\n\nend_stations &lt;- bike_rides_raw |&gt;\n  mutate(across(c(end_lat, end_lng), ~ round(., 5))) |&gt;\n  distinct(end_station_name, end_station_id, end_lat, end_lng) |&gt;\n  filter(!is.na(end_station_name) | !is.na(end_station_id)) |&gt;\n  select(station_name = end_station_name, station_id = end_station_id, lat = end_lat, lng = end_lng)\n\nhead(end_stations)\n\n\n\n\n\nstation_name\nstation_id\nlat\nlng\n\n\n\n\nEllis Ave & 55th St\nKA1504000076\n41.79430\n-87.60145\n\n\nClark St & Elm St\nTA1307000039\n41.90297\n-87.63128\n\n\nCalumet Ave & 18th St\n13102\n41.85761\n-87.61941\n\n\nHonore St & Division St\nTA1305000034\n41.90312\n-87.67394\n\n\nSheffield Ave & Wrightwood Ave\nTA1309000023\n41.92871\n-87.65383\n\n\nClark St & Armitage Ave\n13146\n41.91831\n-87.63628\n\n\n\n\n\n\nJoining together the two data tables:\n\nstations &lt;- rbind(start_stations,end_stations)\n\nstations &lt;- unique(stations)\n\nstations &lt;- stations |&gt; arrange(stations$station_id)\n\nhead(stations)\n\n\n\n\n\n\n\n\n\n\n\nstation_name\nstation_id\nlat\nlng\n\n\n\n\nMTV Hubbard St\n021320\n41.89\n-87.68\n\n\nPublic Rack - Fullerton Ave & Narragansett Ave\n1011\n41.92\n-87.79\n\n\nPublic Rack - Langley Ave & 49th St\n1012\n41.81\n-87.61\n\n\nPublic Rack - Langley Ave & 49th St\n1012\n41.80\n-87.61\n\n\nPublic Rack - Pulaski Rd & Lake St\n1013\n41.89\n-87.73\n\n\nPublic Rack - Richmond St & Thorndale Ave\n1014\n41.99\n-87.70\n\n\n\n\n\n\nExporting data for further exploration in Excel:\n\nwrite_xlsx(divvy_stations, \"~/R/backup/cyclistic/divvy_stations.xlsx\")\n\nwrite_xlsx(stations, \"~/R/backup/cyclistic/stations.xlsx\")\n\n\n\nComparing station names and IDs with Divvy station data:\nObservations:\n\nOne station ID is associated with several different coordinates.\nSome station names and identifiers refer to a company warehouse or repair station:\n\n“WEST CHI-WATSON - DIVVY 001 Warehouse test station”\n“WestChi - DIVVY 001 Warehouse test station”\n“WEST CHI-WATSON - DIVVY 001”\n“Base - 2132 W Hubbard - Hubbard Bike-checking (LBS-WH-TEST)”\n“Base - 2132 W Hubbard Warehouse - Hubbard Bike-checking (LBS-WH-TEST)”\n“DIVVY CASSETTE REPAIR MOBILE STATION - DIVVY CASSETTE REPAIR MOBILE STATION”\n“NewHastings - 2059 Hastings Warehouse Station”\n\nWe can spot a few typos:\n\nPublic Rack - Pulaski Rd &amp; 65th St–&gt; Public Rack - Pulaski Rd & 65th St\nPublic Rack - Kedzie Ave &amp; 62nd Pl –&gt; Public Rack - Kedzie Ave & 62nd Pl\n\nWe can also find inconsistent naming:\n\n“Bissell St & Armitage Ave - Charging” or “Bissell St & Armitage Ave*”\n“Base - 2132 W Hubbard” or “Base - 2132 W Hubbard Warehouse”\n“WestChi” or “WEST CHI-WATSON”\n\nand station names that don’t exist in the Divvy database:\n\n“Elizabeth St & Randolph St”\n“Stony Island Ave & 63rd St”\n\n\nSaving a backup file:\n\nfwrite(bike_rides_raw, \"~/R/backup/cyclistic/bike_rides_raw_02.csv\")\n\n\n\nCorrecting misspellings\nListing the spelling errors:\n\nbike_rides_raw |&gt;\n  filter(start_station_name == \"Public Rack - Pulaski Rd &amp; 65th St\" |\n           start_station_name == \"Public Rack - Kedzie Ave &amp; 62nd Pl\") |&gt;\n  count(start_station_id, start_station_name, sort = T)\n\n\n\n\n\nstart_station_id\nstart_station_name\nn\n\n\n\n\n1038\nPublic Rack - Kedzie Ave & 62nd Pl\n2\n\n\n1033\nPublic Rack - Pulaski Rd & 65th St\n1\n\n\n\n\n\nbike_rides_raw |&gt;\n  filter(end_station_name == \"Public Rack - Pulaski Rd &amp; 65th St\" |\n           end_station_name == \"Public Rack - Kedzie Ave &amp; 62nd Pl\") |&gt;\n  count(end_station_id, end_station_name, sort = T)\n\n\n\n\n\nend_station_id\nend_station_name\nn\n\n\n\n\n\n\n\n\nReplacing incorrect start station names with the correct names:\n\nbike_rides_raw$start_station_name[bike_rides_raw$start_station_name == \"Public Rack - Pulaski Rd &amp; 65th St\"] &lt;- \"Public Rack - Pulaski Rd & 65th St\"\n\nbike_rides_raw$start_station_name[bike_rides_raw$start_station_name ==  \"Public Rack - Kedzie Ave &amp; 62nd Pl\"] &lt;- \"Public Rack - Kedzie Ave & 62nd Pl\"\n\nChecking the results:\n\nbike_rides_raw |&gt;\n  filter(start_station_id == 1038 |\n         start_station_id == 1033 |\n         start_station_name == \"Public Rack - Pulaski Rd & 65th St\" |\n         start_station_name == \"Public Rack - Kedzie Ave & 62nd Pl\") |&gt;\n  count(start_station_id, start_station_name, sort = T)\n\n\n\n\n\nstart_station_id\nstart_station_name\nn\n\n\n\n\n1038\nPublic Rack - Kedzie Ave & 62nd Pl\n25\n\n\n1033\nPublic Rack - Pulaski Rd & 65th St\n15\n\n\n\n\n\n\n\n\nDealing with inconsistent naming\n\n“Bissell St & Armitage Ave - Charging” –&gt; “Bissell St & Armitage Ave*“\n“Base - 2132 W Hubbard” –&gt; “Base - 2132 W Hubbard Warehouse”\n“WestChi” –&gt; “WEST CHI-WATSON”\n\n\nbike_rides_raw |&gt; \n  filter(start_station_name == \"Bissell St & Armitage Ave - Charging\" |\n           start_station_name == \"Base - 2132 W Hubbard\" |\n           start_station_name == \"Base - 2132 W Hubbard Warehouse\" |\n           start_station_name == \"WestChi\" |\n           start_station_name == \"WEST CHI-WATSON\") |&gt;\n  count(start_station_id, start_station_name, sort = T)\n\n\n\n\n\n\n\n\n\n\nstart_station_id\nstart_station_name\nn\n\n\n\n\nHubbard Bike-checking (LBS-WH-TEST)\nBase - 2132 W Hubbard\n1365\n\n\nHubbard Bike-checking (LBS-WH-TEST)\nBase - 2132 W Hubbard Warehouse\n461\n\n\nDIVVY 001 - Warehouse test station\nWestChi\n6\n\n\nDIVVY 001 - Warehouse test station\nWEST CHI-WATSON\n4\n\n\nDIVVY 001\nWEST CHI-WATSON\n3\n\n\n\n\n\nbike_rides_raw |&gt; \n  filter(end_station_name == \"Bissell St & Armitage Ave - Charging\" |\n           end_station_name == \"Base - 2132 W Hubbard\" |\n           end_station_name == \"Base - 2132 W Hubbard Warehouse\" |\n           end_station_name == \"WestChi\" |\n           end_station_name == \"WEST CHI-WATSON\") |&gt;\n  count(end_station_id, end_station_name, sort = T)\n\n\n\n\n\n\n\n\n\n\nend_station_id\nend_station_name\nn\n\n\n\n\nHubbard Bike-checking (LBS-WH-TEST)\nBase - 2132 W Hubbard\n183\n\n\nHubbard Bike-checking (LBS-WH-TEST)\nBase - 2132 W Hubbard Warehouse\n31\n\n\nchargingstx1\nBissell St & Armitage Ave - Charging\n2\n\n\n\n\n\n\nCorrecting station names:\n\n## start station names\n\nbike_rides_raw$start_station_name[bike_rides_raw$start_station_name == \"Base - 2132 W Hubbard\"] &lt;- \"Base - 2132 W Hubbard Warehouse\"\n\nbike_rides_raw$start_station_name[bike_rides_raw$start_station_name == \"WestChi\"] &lt;- \"WEST CHI-WATSON\"\n\n## end station names\n\nbike_rides_raw$end_station_name[bike_rides_raw$end_station_name == \"Base - 2132 W Hubbard\"] &lt;- \"Base - 2132 W Hubbard Warehouse\"\n\nbike_rides_raw$end_station_name[bike_rides_raw$end_station_name == \"Bissell St & Armitage Ave - Charging\"] &lt;- \"Bissell St & Armitage Ave*\"\n\nUnifying the Divvy Warehouse ID:\n\nbike_rides_raw$start_station_id[bike_rides_raw$start_station_id == \"DIVVY 001 - Warehouse test station\"] &lt;- \"DIVVY 001\"\n\nFiltering for “Elizabeth St & Randolph St.” and “Stony Island Ave & 63rd St”\n\nbike_rides_raw |&gt;\n  filter(start_station_name == \"Elizabeth St & Randolph St\" |\n    start_station_name == \"Stony Island Ave & 63rd St\" |\n    start_station_id == \"23001\" |\n    start_station_id == \"653B\") |&gt;\n  count(start_station_id, start_station_name, sort = T)\n\n\n\n\n\nstart_station_id\nstart_station_name\nn\n\n\n\n\n23001\nElizabeth St & Randolph St\n274\n\n\nNA\nElizabeth St & Randolph St\n124\n\n\n653B\nStony Island Ave & 63rd St\n15\n\n\nNA\nStony Island Ave & 63rd St\n8\n\n\n\n\n\nbike_rides_raw |&gt;\n  filter(end_station_name == \"Elizabeth St & Randolph St\" |\n    end_station_name == \"Stony Island Ave & 63rd St\" |\n    end_station_id == \"23001\" |\n    end_station_id == \"653B\") |&gt;\n  count(end_station_id, end_station_name, sort = T)\n\n\n\n\n\nend_station_id\nend_station_name\nn\n\n\n\n\n23001\nElizabeth St & Randolph St\n295\n\n\nNA\nElizabeth St & Randolph St\n133\n\n\n653B\nStony Island Ave & 63rd St\n12\n\n\nNA\nStony Island Ave & 63rd St\n8\n\n\n\n\n\n\nReplacing missing IDs:\n\nbike_rides_raw &lt;- bike_rides_raw |&gt;\n  mutate(\n    start_station_id = ifelse(start_station_name == \"Elizabeth St & Randolph St\" & is.na(start_station_id),\n      \"23001\", start_station_id\n    ),\n    start_station_id = ifelse(start_station_name == \"Stony Island Ave & 63rd St\" & is.na(start_station_id),\n      \"653B\", start_station_id\n    )\n  )\n\nbike_rides_raw &lt;- bike_rides_raw |&gt;\n  mutate(\n    end_station_id = ifelse(end_station_name == \"Elizabeth St & Randolph St\" & is.na(end_station_id),\n      \"23001\", end_station_id\n    ),\n    end_station_id = ifelse(end_station_name == \"Stony Island Ave & 63rd St\" & is.na(end_station_id),\n      \"653B\", end_station_id\n    )\n  )\n\nFiltering for cases where station names are missing but IDs are present:\n\nbike_rides_raw |&gt;\n  filter(is.na(start_station_name) & !is.na(start_station_id)) |&gt;\n  count(start_station_name, sort = T)\n\n\n\n\n\nstart_station_name\nn\n\n\n\n\n\n\n\nbike_rides_raw |&gt;\n  filter(is.na(end_station_name) & !is.na(end_station_id)) |&gt;\n  count(end_station_name, sort = T)\n\n\n\n\n\nend_station_name\nn\n\n\n\n\n\n\n\n\nNo other cases are found where the station ID is present.\nFiltering for cases where station IDs are missing but names are present:\n\nbike_rides_raw |&gt;\n  filter(is.na(start_station_id) & !is.na(start_station_name)) |&gt;\n  count(start_station_id, sort = T)\n\n\n\n\n\nstart_station_id\nn\n\n\n\n\n\n\n\nbike_rides_raw |&gt;\n  filter(is.na(end_station_id) & !is.na(end_station_name)) |&gt;\n  count(end_station_id, sort = T)\n\n\n\n\n\nend_station_id\nn\n\n\n\n\n\n\n\n\nNo other cases are found where the station name is present.\n\n\nNull end coordinates\n\nbike_rides_raw |&gt;\n  subset(end_lat == 0 | end_lng == 0)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nride_id\nbike_type\nstart_time\nend_time\nstart_station_name\nstart_station_id\nend_station_name\nend_station_id\nstart_lat\nstart_lng\nend_lat\nend_lng\nuser_type\n\n\n\n\n0A6988FE859F4D54\nclassic_bike\n2022-11-09 10:58:37\n2022-11-09 11:06:21\nLaSalle St & Jackson Blvd\nTA1309000004\nGreen St & Madison Ave*\nchargingstx07\n41.87817\n-87.63193\n0\n0\nmember\n\n\n3B47B333C0D186F0\nclassic_bike\n2022-11-09 13:39:03\n2022-11-09 13:44:38\nFranklin St & Adams St (Temp)\nTA1309000008\nGreen St & Madison Ave*\nchargingstx07\n41.87943\n-87.63550\n0\n0\nmember\n\n\n42AF82C53D831251\nelectric_bike\n2022-11-09 16:17:40\n2022-11-09 16:38:06\nLaflin St & Cullerton St\n13307\nGreen St & Madison Ave*\nchargingstx07\n41.85492\n-87.66369\n0\n0\ncasual\n\n\n6AFE1471227BD76F\nclassic_bike\n2022-11-09 16:17:16\n2022-11-09 16:26:17\nMorgan St & Polk St\nTA1307000130\nGreen St & Madison Ave*\nchargingstx07\n41.87174\n-87.65103\n0\n0\ncasual\n\n\n75DE33501313D0CE\nclassic_bike\n2022-11-09 15:52:08\n2022-11-09 15:52:23\nGreen St & Madison St\nTA1307000120\nGreen St & Madison Ave*\nchargingstx07\n41.88189\n-87.64879\n0\n0\nmember\n\n\n7F49424E860E7094\nclassic_bike\n2022-11-09 13:27:04\n2022-11-09 13:28:28\nGreen St & Washington Blvd\n13053\nGreen St & Madison Ave*\nchargingstx07\n41.88318\n-87.64872\n0\n0\nmember\n\n\nBB8AA29838266294\nclassic_bike\n2022-11-09 11:32:53\n2022-11-09 11:37:30\nCanal St & Adams St\n13011\nGreen St & Madison Ave*\nchargingstx07\n41.87926\n-87.63990\n0\n0\nmember\n\n\nE9495F1DC3475D41\nclassic_bike\n2022-11-09 12:21:55\n2022-11-09 12:26:18\nAberdeen St & Randolph St\n18062\nGreen St & Madison Ave*\nchargingstx07\n41.88411\n-87.65426\n0\n0\nmember\n\n\n\n\n\n\nWe can find 8 rides where the end station is Green St & Madison Ave* but the coordinates are missing.\nSearching for Green St & Madison Ave* station coordinates:\n\nbike_rides_raw |&gt;\n  filter(start_station_name == \"Green St & Madison Ave*\") |&gt;\n  count(start_station_name, start_station_id, start_lat, start_lng, sort = T) |&gt;\n  head(10)\n\n\n\n\n\nstart_station_name\nstart_station_id\nstart_lat\nstart_lng\nn\n\n\n\n\nGreen St & Madison Ave*\nchargingstx07\n41.88183\n-87.64883\n320\n\n\nGreen St & Madison Ave*\nchargingstx07\n41.88162\n-87.64887\n1\n\n\nGreen St & Madison Ave*\nchargingstx07\n41.88164\n-87.64889\n1\n\n\nGreen St & Madison Ave*\nchargingstx07\n41.88164\n-87.64895\n1\n\n\nGreen St & Madison Ave*\nchargingstx07\n41.88167\n-87.64880\n1\n\n\nGreen St & Madison Ave*\nchargingstx07\n41.88167\n-87.64891\n1\n\n\nGreen St & Madison Ave*\nchargingstx07\n41.88168\n-87.64881\n1\n\n\nGreen St & Madison Ave*\nchargingstx07\n41.88168\n-87.64889\n1\n\n\nGreen St & Madison Ave*\nchargingstx07\n41.88169\n-87.64902\n1\n\n\nGreen St & Madison Ave*\nchargingstx07\n41.88170\n-87.64840\n1\n\n\n\n\n\n\n\nbike_rides_raw |&gt;\n  filter(end_station_name == \"Green St & Madison Ave*\") |&gt;\n  count(end_station_name, end_station_id, end_lat, end_lng, sort = T) |&gt;\n  head(10)\n\n\n\n\n\nend_station_name\nend_station_id\nend_lat\nend_lng\nn\n\n\n\n\nGreen St & Madison Ave*\nchargingstx07\n41.88183\n-87.64883\n495\n\n\nGreen St & Madison Ave*\nchargingstx07\n0.00000\n0.00000\n8\n\n\nGreen St & Madison Ave*\nchargingstx07\n41.88188\n-87.64895\n2\n\n\nGreen St & Madison Ave*\nchargingstx07\n41.88183\n-87.64883\n1\n\n\n\n\n\n\nReplacing zero coordinates with the correct values:\n\nbike_rides_raw$end_lat[bike_rides_raw$end_lat == 0] &lt;- 41.88183\nbike_rides_raw$end_lng[bike_rides_raw$end_lng == 0] &lt;- -87.64883\n\nSaving a backup file:\n\nfwrite(bike_rides_raw, \"~/R/backup/cyclistic/bike_rides_raw_03.csv\")"
  },
  {
    "objectID": "projects/cyclistic/index.html#data-manipulation",
    "href": "projects/cyclistic/index.html#data-manipulation",
    "title": "Cyclistic Case Study",
    "section": "Data Manipulation",
    "text": "Data Manipulation\n\nNew variable: travel_time\nCalculating the duration of each bike ride in minutes:\n\nbike_rides_raw &lt;- bike_rides_raw |&gt;\n  mutate(\n    travel_time = round(\n      difftime(\n        end_time, start_time,\n        units = \"mins\"\n      ),\n      digits = 2\n    ), .after = end_time\n  )\n\nbike_rides_raw$travel_time &lt;- as.numeric(bike_rides_raw$travel_time)\n\n\n\nNew time units\nWe are adding new columns that list the date, year, month, day and hour of each trip. This will allow us to aggregate data for different time units.\ndate\n\nbike_rides_raw$date &lt;- as.Date(bike_rides_raw$start_time)\n\nmonth\n\nbike_rides_raw$month &lt;- format(as.Date(bike_rides_raw$date), \"%B\")\n\nbike_rides_raw$month &lt;- ordered(bike_rides_raw$month,\n  levels = c(\n    \"January\", \"February\", \"March\",\n    \"April\", \"May\", \"June\", \"July\",\n    \"August\", \"September\", \"October\",\n    \"November\", \"December\"\n  )\n)\n\nday\n\nbike_rides_raw$day &lt;- as.integer(format(as.Date(bike_rides_raw$date), \"%d\"))\n\nweekday\n\nbike_rides_raw$weekday &lt;- format(as.Date(bike_rides_raw$date), \"%A\")\n\nbike_rides_raw$weekday &lt;- ordered(bike_rides_raw$weekday,\n  levels = c(\n    \"Monday\", \"Tuesday\", \"Wednesday\",\n    \"Thursday\", \"Friday\", \"Saturday\",\n    \"Sunday\"\n  )\n)\n\nhour\n\nbike_rides_raw$hour &lt;- as.integer(format(bike_rides_raw$start_time, \"%H\"))\n\nA glimpse at the new time units:\n\nbike_rides_raw |&gt;\n  select(start_time, date, month, day, weekday, hour) |&gt;\n  head()\n\n\n\n\n\nstart_time\ndate\nmonth\nday\nweekday\nhour\n\n\n\n\n2022-07-28 09:02:27\n2022-07-28\nJuly\n28\nThursday\n9\n\n\n2022-12-15 15:36:06\n2022-12-15\nDecember\n15\nThursday\n15\n\n\n2022-07-22 16:56:46\n2022-07-22\nJuly\n22\nFriday\n16\n\n\n2022-07-17 13:01:54\n2022-07-17\nJuly\n17\nSunday\n13\n\n\n2022-07-02 20:02:36\n2022-07-02\nJuly\n2\nSaturday\n20\n\n\n2022-06-12 05:12:17\n2022-06-12\nJune\n12\nSunday\n5\n\n\n\n\n\n\n\n\nNew variable: time_of_day\nClassifying the extracted time by time of the day:\n\n## a column time_of_day is created using logic with case_when()\n## to classify rows into\n## morning rush/morning/lunchtime/afternoon/afternoon rush/evening/night\n## based on their hour of departure\n\nbike_rides_raw &lt;- bike_rides_raw |&gt;\n  mutate(\n    time_of_day = case_when(\n      hour &gt;= 3 & hour &lt; 6 ~ \"Dawn\",\n      hour &gt;= 6 & hour &lt; 9 ~ \"Early morning\",\n      hour &gt;= 9 & hour &lt; 12 ~ \"Late morning\",\n      hour &gt;= 12 & hour &lt; 15 ~ \"Early afternoon\",\n      hour &gt;= 15 & hour &lt; 18 ~ \"Late afternoon\",\n      hour &gt;= 18 & hour &lt; 21 ~ \"Early evening\",\n      hour &gt;= 21 & hour &lt; 24 ~ \"Late evening\",\n      hour &gt;= 0 & hour &lt; 3 ~ \"Night\"\n    )\n  )\n\nbike_rides_raw$time_of_day &lt;- as.factor(bike_rides_raw$time_of_day)\n\nbike_rides_raw$time_of_day &lt;- ordered(bike_rides_raw$time_of_day,\n  levels = c(\n    \"Dawn\", \"Early morning\",\n    \"Late morning\", \"Early afternoon\",\n    \"Late afternoon\", \"Early evening\",\n    \"Late evening\", \"Night\"\n  )\n)\n\nChecking the new variable:\n\nbike_rides_raw |&gt;\n  select(start_time, date, month, day, weekday, hour, time_of_day) |&gt;\n  head()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nstart_time\ndate\nmonth\nday\nweekday\nhour\ntime_of_day\n\n\n\n\n2022-07-28 09:02:27\n2022-07-28\nJuly\n28\nThursday\n9\nLate morning\n\n\n2022-12-15 15:36:06\n2022-12-15\nDecember\n15\nThursday\n15\nLate afternoon\n\n\n2022-07-22 16:56:46\n2022-07-22\nJuly\n22\nFriday\n16\nLate afternoon\n\n\n2022-07-17 13:01:54\n2022-07-17\nJuly\n17\nSunday\n13\nEarly afternoon\n\n\n2022-07-02 20:02:36\n2022-07-02\nJuly\n2\nSaturday\n20\nEarly evening\n\n\n2022-06-12 05:12:17\n2022-06-12\nJune\n12\nSunday\n5\nDawn\n\n\n\n\n\n\nSaving a backup file:\n\nfwrite(bike_rides_raw, \"~/R/backup/cyclistic/bike_rides_raw_04.csv\")"
  },
  {
    "objectID": "projects/cyclistic/index.html#outliers",
    "href": "projects/cyclistic/index.html#outliers",
    "title": "Cyclistic Case Study",
    "section": "Outliers",
    "text": "Outliers\nDrawing a boxplot to spot outliers:\n\nbike_rides_raw |&gt;\n  ggplot(aes(travel_time)) +\n  geom_boxplot(show.legend = F, alpha = .5)\n\n\n\n\nFigure 1: Boxplot of travel time in minutes\n\n\n\n\nOur boxplot shows some extreme values. Let’s take a closer look!\n\nsummary(bike_rides_raw$travel_time)\n\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n-10353.35      5.68     10.03     18.98     18.02  41387.25 \n\n\nThe minimum and maximum values show that there are unrealistic values at both extremes.\n\nFailed trips\nLet’s start with the left side of the boxplot. Bike trips of less than two minutes seem highly unrealistic. I suspect that these short trips are the result of failed docking attempts.\nFiltering for negative travel times and extremely short trips:\n\nfailed_trips &lt;- filter(bike_rides_raw, travel_time &lt;= 1) \n\nnrow(failed_trips)\n\n[1] 134126\n\n\nThe fact that most rides end at the same coordinate from which they started proves my assumption.\nDropping failed trips:\n\nbike_rides_raw &lt;- filter(bike_rides_raw, travel_time &gt; 1)\n\n\n\nExtremely long trips\nThe 28-day bike rental also seems quite extreme.\nFiltering for extremely long trips:\n\noutliers &lt;- filter(bike_rides_raw, travel_time &gt; 1440)\n\nsetDT(outliers)\n\nnrow(outliers)\n\n[1] 5309\n\n\nThe longest trip took 28 days. The 11 longest trips are associated with docked bikes.\nOn Divvy’s website, you can find what rules apply if you keep a bike out for longer than the time included in your membership or pass:\n\nDay Pass holders: unlimited number of 3 hour rides over a 24-hour period. If you keep a bike out for longer than 3 hours at a time, you will be charged an extra $0.17 for each additional minute.\nAnnual Members: the first 45 minutes of each ride are included in the membership price. If you keep a bike out for longer than 45 minutes at a time, you will be charged an extra $0.17 for each additional minute.\nNOTE: If you do not return a bike within a 24-hour period, you may be charged a lost or stolen bike fee of $250 (plus tax).\n\nThis means that bicycles kept out for more than one day can be considered outliers.\nDropping outliers:\n\nbike_rides_raw &lt;- filter(bike_rides_raw, travel_time &lt;= 1440)\n\n\n\nMaintenance-related trips\nFiltering service trips:\n\nwarehouse_trips &lt;- bike_rides_raw |&gt;\n  filter(start_station_name %in% c(\n    \"Base - 2132 W Hubbard Warehouse\",\n    \"DIVVY CASSETTE REPAIR MOBILE STATION\",\n    \"Hastings LWS\",\n    \"NewHastings\",\n    \"WEST CHI-WATSON\"\n  ) |\n    end_station_name %in% c(\n      \"Base - 2132 W Hubbard Warehouse\",\n      \"DIVVY CASSETTE REPAIR MOBILE STATION\",\n      \"Hastings LWS\",\n      \"NewHastings\",\n      \"WEST CHI-WATSON\"\n    ))\n\nsetDT(warehouse_trips)\n\nnrow(warehouse_trips)\n\n[1] 2098\n\n\nRemoving all service trips to/from warehouses or repair stations:\n\nbike_rides_raw &lt;- bike_rides_raw |&gt;\n  anti_join(warehouse_trips, join_by(ride_id))\n\nSaving deleted cases:\n\nfwrite(failed_trips, \"~/R/backup/cyclistic/failed_trips.csv\")\nfwrite(outliers, \"~/R/backup/cyclistic/outliers.csv\")\nfwrite(warehouse_trips, \"~/R/backup/cyclistic/warehouse_trips.csv\")"
  },
  {
    "objectID": "projects/cyclistic/index.html#missing-data",
    "href": "projects/cyclistic/index.html#missing-data",
    "title": "Cyclistic Case Study",
    "section": "Missing data",
    "text": "Missing data\nWhere does the missingness come from?\n\nIs there a relationship between missing data and other values?\nIs it random or is it systematic?\nCan we find the missing data?\n\n\nsum(!complete.cases(bike_rides_raw))\n\n[1] 1266200\n\n\nPercentage of cases with missing values:\n\npct_miss_case(bike_rides_raw)\n\n[1] 22.36238\n\n\nPercentage of missing values:\n\npct_miss(bike_rides_raw)\n\n[1] 2.914482\n\n\nWe have 1,266,200 cases with missing data, which represents 22.36% of the bike trips in our data table. In total, 2.91% of the values are missing.\n\nPatterns of missingness\nSummarizing the missingness in each variable:\n\nmiss_var_summary(bike_rides_raw)\n\n\n\n\n\n\nvariable\nn_miss\npct_miss\n\n\n\n\nend_station_name\n843965\n14.9052831\n\n\nend_station_id\n843965\n14.9052831\n\n\nstart_station_name\n805588\n14.2275061\n\n\nstart_station_id\n805588\n14.2275061\n\n\nend_lat\n681\n0.0120272\n\n\nend_lng\n681\n0.0120272\n\n\nride_id\n0\n0.0000000\n\n\nbike_type\n0\n0.0000000\n\n\nstart_time\n0\n0.0000000\n\n\nend_time\n0\n0.0000000\n\n\ntravel_time\n0\n0.0000000\n\n\nstart_lat\n0\n0.0000000\n\n\nstart_lng\n0\n0.0000000\n\n\nuser_type\n0\n0.0000000\n\n\ndate\n0\n0.0000000\n\n\nmonth\n0\n0.0000000\n\n\nday\n0\n0.0000000\n\n\nweekday\n0\n0.0000000\n\n\nhour\n0\n0.0000000\n\n\ntime_of_day\n0\n0.0000000\n\n\n\n\nFigure 2: A summary of the missing data\n\n\n\nLet’s look at how missingness is distributed across variables:\n\ngg_miss_upset(bike_rides_raw)\n\n\n\n\nFigure 3: Distribution of missingness across variables\n\n\n\n\nThe graph shows four intersections between missing data:\n\ngroup: both end station names and ID-s are missing - 459,931 cases\ngroup: both start station names and ID-s are missing - 422,235 cases\ngroup: both start and end station names and ID-s are missing - 383,353 cases\ngroup: both end station coordinates, names and ID-s are missing - 681 cases\n\n\n\nMissing destination coordinates\n\nend_lat (n_missing = 681)\nend_lng (n_missing = 681)\n\nFiltering bike trips without destination coordinates:\n\nno_end_coord &lt;- bike_rides_raw |&gt;\n  subset(is.na(end_lat) | is.na(end_lng))\n\nsetDT(no_end_coord)\n\nnrow(no_end_coord)\n\n[1] 681\n\n\nCan we link the missing destination coordinates to a specific user group?\n\ngg_miss_fct(no_end_coord, user_type)\n\n\n\n\nFigure 4: Percentage of missings for each variable, broken down by user type\n\n\n\n\nBoth groups have the same proportion of missing end station coordinates.\nCan we link the missing destination coordinates to a specific bike type?\n\ngg_miss_fct(no_end_coord, bike_type)\n\n\n\n\nFigure 5: Percentage of missings for each variable, broken down by bike type\n\n\n\n\nThe lack of destination coordinates is linked to classic and docked bikes.\nCan we link the missing destination coordinates to a specific time period?\n\nno_end_coord |&gt;\n  group_by(user_type, month) |&gt;\n  summarise(\n    number_of_rides = n(),\n    .groups = \"drop_last\"\n  ) |&gt;\n  ggplot(aes(month, number_of_rides, fill = user_type)) +\n  geom_col(alpha = .5) +\n  theme(\n    legend.position = \"right\",\n    legend.direction = \"vertical\"\n  ) +\n  theme(axis.text.x = element_text(angle = 60, hjust = 1))\n\n\n\n\nFigure 6: Number of cases with missing data, broken down by month and user type\n\n\n\n\nWe can’t link the missing destination coordinates to a specific time period.\nTo sum up, we can’t interpret these journeys without knowing where they ended. It is not possible to reconstruct the missing data. For this reason, these cases will be deleted.\nSaving for documentation:\n\nfwrite(no_end_coord, \"~/R/backup/cyclistic/no_end_coord.csv\")\n\nRemoving all bike trips without destination coordinates:\n\nbike_rides_raw &lt;- bike_rides_raw |&gt;\n  anti_join(no_end_coord, join_by(ride_id))\n\n\n\nDeleted cases\nSummary of the deleted cases:\n\n\n\nCases\nNumber of cases\n\n\n\n\nfailed_trips\n134126\n\n\noutliers\n5309\n\n\nwarehouse_trips\n2098\n\n\nno_end_coord\n681\n\n\n\n\n\n\nSum\n142214\n\n\n\n\nnrow(failed_trips) + nrow(outliers) + nrow(warehouse_trips) + nrow(no_end_coord)\n\n[1] 142214\n\n\n\n\nFilter missings\nFiltering cases with missing values:\n\nbike_rides_missing &lt;- bike_rides_raw |&gt;\n  filter(!complete.cases(bike_rides_raw))\n\nnrow(bike_rides_missing)\n\n[1] 1265519\n\n\nAt-a-glance ggplot of the missingness:\n\nvis_miss(slice_sample(bike_rides_missing, n = 50000), warn_large_data = FALSE)\n\n## The size limit for vis_dat and vis_miss functions is 900,000 values,\n## which means we can only use a sample of our data for this visualization.\n\n\n\n\nFigure 7: Visual summary of the missing data\n\n\n\n\n\n\nCoordinates\nLet’s take a closer look at the coordinates belonging to the missing values.\n\nbike_rides_missing |&gt;\n  select(\n    start_station_name, start_station_id, end_station_name, end_station_id,\n    start_lat, start_lng, end_lat, end_lng\n  ) |&gt;\n  head(10)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nstart_station_name\nstart_station_id\nend_station_name\nend_station_id\nstart_lat\nstart_lng\nend_lat\nend_lng\n\n\n\n\nNA\nNA\nNA\nNA\n41.90000\n-87.69000\n41.91000\n-87.69000\n\n\nNA\nNA\nNA\nNA\n42.00000\n-87.67000\n41.98000\n-87.66000\n\n\nNA\nNA\nClark St & Armitage Ave\n13146\n41.90000\n-87.62000\n41.91831\n-87.63628\n\n\nWells St & Elm St\nKA1504000135\nNA\nNA\n41.90316\n-87.63478\n41.92000\n-87.70000\n\n\nNA\nNA\nNA\nNA\n41.79000\n-87.60000\n41.79000\n-87.59000\n\n\nKimball Ave & Belmont Ave\nKA150400009X\nNA\nNA\n41.93940\n-87.71164\n41.94000\n-87.76000\n\n\nNA\nNA\nNA\nNA\n41.79000\n-87.69000\n41.79000\n-87.71000\n\n\nNA\nNA\nPulaski Rd & 51st St\n343\n41.80000\n-87.73000\n41.80000\n-87.72000\n\n\nNA\nNA\nNA\nNA\n41.89000\n-87.75000\n41.87000\n-87.75000\n\n\nAshland Ave & Division St\n13061\nNA\nNA\n41.90343\n-87.66794\n41.89000\n-87.67000\n\n\n\n\n\n\nObservations\n\nWhere station names are missing, the coordinates have fewer decimals (1-2 digits).\nIf you search for these coordinates in the Divvy map, no results are returned.\n\n\nLet’s try to find these coordinates in our stations data:\n\nfilter(stations, lat == 41.97 & lng == -87.71)\n\n\n\n\n\n\n\n\n\n\n\nstation_name\nstation_id\nlat\nlng\n\n\n\n\nPublic Rack - Kimball Ave & Carmen Ave\n490\n41.97\n-87.71\n\n\nKimball Ave & Carmen Ave\n490\n41.97\n-87.71\n\n\nPublic Rack - Kedzie Ave & Argyle St\n491\n41.97\n-87.71\n\n\nKedzie Ave & Argyle St\n491\n41.97\n-87.71\n\n\nChristiana Ave & Lawrence Ave\n860\n41.97\n-87.71\n\n\nPublic Rack - Christiana Ave & Lawrence Ave\n860\n41.97\n-87.71\n\n\nPublic Rack - Sawyer Ave & Lawrence Ave\n861\n41.97\n-87.71\n\n\nSawyer Ave & Lawrence Ave\n861\n41.97\n-87.71\n\n\n\n\n\n\nWe can find four different stations with four different ID-s at lat = 41.97, lng = -87.71.\n\n\n\n\n\n\nNote\n\n\n\n\n\nDegree precision of latitude and longitude coordinates:\nPrecision can be measured by the number of decimal places in the latitude and longitude coordinates.\nTo identify stations accurately, we would need coordinates with 4-5 decimal places.\n\n\n\n\nKnowing this, I assume that I won’t be able to reconstruct the missing station names and ID-s.\nWith 1,265,519 cases concerned, the question is: should I delete all these cases?\nFirst, I filtered out the inaccurate data and now I will check if the missing data can be linked to a specific variable.\nMy strategy is to delete only those cases that would distort our analysis.\n\n\nInvestigating the missingness\nCan the missing data be linked to a specific time period?\n\nbike_rides_missing |&gt;\n  group_by(user_type, month) |&gt;\n  summarise(\n    number_of_rides = n(),\n    .groups = \"drop_last\"\n  ) |&gt;\n  ggplot(aes(month, number_of_rides, fill = user_type)) +\n  geom_col(alpha = .5) +\n  theme(\n    legend.position = \"right\",\n    legend.direction = \"vertical\"\n  ) +\n  theme(axis.text.x = element_text(angle = 60, hjust = 1))\n\n\n\n\nFigure 8: Number of cases with missing data, broken down by month and user type\n\n\n\n\nOur graph shows that the missing data cannot be linked to a specific time period. It appears throughout the year.\nWould both groups of users be affected equally if we deleted all rows with missing values?\n\nbike_rides_missing |&gt;\n  ggplot(aes(user_type)) +\n  geom_bar(alpha = .5) +\n  scale_y_continuous(labels = label_number())\n\n\n\n\nFigure 9: Number of cases with missing data broken down by user type\n\n\n\n\nBoth group of users have missing values and members would be slightly more affected than casual users.\nCan the missing data be linked to a specific bike type?\n\nbike_rides_missing |&gt;\n  group_by(bike_type, month) |&gt;\n  summarise(\n    number_of_rides = n(),\n    .groups = \"drop_last\"\n  ) |&gt;\n  ggplot(aes(month, number_of_rides, fill = bike_type)) +\n  geom_col(alpha = .5) +\n  theme(axis.text.x = element_text(angle = 60, hjust = 1))\n\n\n\n\nFigure 10: Number of cases with missing values, broken down by bike type\n\n\n\n\nThere seems to be a clear link between missing data and electric bikes.\nAfter weighing the benefits and risks of deleting all cases with missing values, I decided not to remove these cases from our data table. It is not possible to identify the name of the start or end station of these trips, due to the imprecision of the coordinates, but deleting the more than 1 million observations concerned would bias the subsequent results of the analysis, as the deletion would adversely affect cyclist members and users who choose electric bicycles.\n\nfwrite(bike_rides_missing, \"~/R/backup/cyclistic/bike_rides_missing.csv\")"
  },
  {
    "objectID": "projects/cyclistic/index.html#final-check",
    "href": "projects/cyclistic/index.html#final-check",
    "title": "Cyclistic Case Study",
    "section": "Final check",
    "text": "Final check\n\nglimpse(bike_rides_raw)\n\nRows: 5,661,506\nColumns: 20\n$ ride_id            &lt;chr&gt; \"00000179CF2C4FB5\", \"0000038F578A7278\", \"0000047373~\n$ bike_type          &lt;fct&gt; electric_bike, electric_bike, electric_bike, electr~\n$ start_time         &lt;dttm&gt; 2022-07-28 09:02:27, 2022-12-15 15:36:06, 2022-07-~\n$ end_time           &lt;dttm&gt; 2022-07-28 09:13:51, 2022-12-15 15:44:35, 2022-07-~\n$ travel_time        &lt;dbl&gt; 11.40, 8.48, 25.20, 14.32, 5.53, 12.50, 4.80, 11.13~\n$ start_station_name &lt;chr&gt; \"Ellis Ave & 55th St\", \"Lakeview Ave & Fullerton Pk~\n$ start_station_id   &lt;chr&gt; \"KA1504000076\", \"TA1309000019\", \"13022\", \"13193\", N~\n$ end_station_name   &lt;chr&gt; \"Ellis Ave & 55th St\", \"Clark St & Elm St\", \"Calume~\n$ end_station_id     &lt;chr&gt; \"KA1504000076\", \"TA1307000039\", \"13102\", \"TA1305000~\n$ start_lat          &lt;dbl&gt; 41.79424, 41.92583, 41.89221, 41.92185, 41.90000, 4~\n$ start_lng          &lt;dbl&gt; -87.60134, -87.63882, -87.61183, -87.64402, -87.690~\n$ end_lat            &lt;dbl&gt; 41.79430, 41.90297, 41.85761, 41.90312, 41.91000, 4~\n$ end_lng            &lt;dbl&gt; -87.60145, -87.63128, -87.61941, -87.67394, -87.690~\n$ user_type          &lt;fct&gt; casual, casual, casual, casual, member, casual, mem~\n$ date               &lt;date&gt; 2022-07-28, 2022-12-15, 2022-07-22, 2022-07-17, 20~\n$ month              &lt;ord&gt; July, December, July, July, July, June, August, May~\n$ day                &lt;int&gt; 28, 15, 22, 17, 2, 12, 4, 19, 2, 12, 25, 13, 15, 19~\n$ weekday            &lt;ord&gt; Thursday, Thursday, Friday, Sunday, Saturday, Sunda~\n$ hour               &lt;int&gt; 9, 15, 16, 13, 20, 5, 22, 14, 12, 10, 10, 18, 18, 2~\n$ time_of_day        &lt;ord&gt; Late morning, Late afternoon, Late afternoon, Early~\n\n\nTaking a peak at column names:\n\ncolnames(bike_rides_raw)\n\n [1] \"ride_id\"            \"bike_type\"          \"start_time\"        \n [4] \"end_time\"           \"travel_time\"        \"start_station_name\"\n [7] \"start_station_id\"   \"end_station_name\"   \"end_station_id\"    \n[10] \"start_lat\"          \"start_lng\"          \"end_lat\"           \n[13] \"end_lng\"            \"user_type\"          \"date\"              \n[16] \"month\"              \"day\"                \"weekday\"           \n[19] \"hour\"               \"time_of_day\"       \n\n\nSelecting and reordering variables:\n\nbike_rides_clean &lt;- subset(\n  bike_rides_raw,\n  select = c(\n    \"ride_id\", \"user_type\", \"bike_type\",\n    \"travel_time\", \"date\", \"month\", \"day\",\n    \"weekday\", \"hour\", \"time_of_day\",\n    \"start_station_name\", \"end_station_name\",\n    \"start_lat\", \"start_lng\", \"end_lat\", \"end_lng\"\n  )\n)\n\nChanging data types:\n\nbike_rides_clean$start_station_name &lt;- as.factor(bike_rides_clean$start_station_name)\nbike_rides_clean$end_station_name &lt;- as.factor(bike_rides_clean$end_station_name)\n\nSaving clean data:\n\nfwrite(bike_rides_clean, \"~/R/backup/cyclistic/bike_rides_clean.csv\")\n\nRemoving data tables to free up memory:\n\nrm(\n  failed_trips,\n  outliers,\n  warehouse_trips,\n  no_end_coord,\n  bike_rides_missing,\n  start_stations,\n  end_stations\n)"
  },
  {
    "objectID": "projects/cyclistic/index.html#limitations-of-the-data",
    "href": "projects/cyclistic/index.html#limitations-of-the-data",
    "title": "Cyclistic Case Study",
    "section": "Limitations of the data",
    "text": "Limitations of the data\n\n\n\n\n\n\nNote\n\n\n\nThe data has some limitations due to protection of user privacy:\n\nWe lack demographic data.\nThis means we can’t tell if a user is a local resident or a visitor.\nLikewise, we can’t link different bike rides to the same user.\nWe don’t know how many unique users are in the database.\nWe can’t tell how many bike trips can be linked to the same user.\nWe can’t tell if a casual user has bought a single ride pass or a day pass.\nDue to the imprecision of the coordinates, we have 1 265 519 cases with incomplete station identification."
  },
  {
    "objectID": "projects/cyclistic/index.html#descriptive-analysis",
    "href": "projects/cyclistic/index.html#descriptive-analysis",
    "title": "Cyclistic Case Study",
    "section": "Descriptive analysis",
    "text": "Descriptive analysis\n\nsummary(bike_rides_clean)\n\n   ride_id           user_type               bike_type        travel_time     \n Length:5661506     casual:2280849   classic_bike :2596597   Min.   :   1.02  \n Class :character   member:3380657   docked_bike  : 169551   1st Qu.:   5.93  \n Mode  :character                    electric_bike:2895358   Median :  10.27  \n                                                             Mean   :  16.21  \n                                                             3rd Qu.:  18.27  \n                                                             Max.   :1439.37  \n                                                                              \n      date                  month              day             weekday      \n Min.   :2022-04-01   July     : 804092   Min.   : 1.00   Monday   :741862  \n 1st Qu.:2022-06-18   August   : 766881   1st Qu.: 8.00   Tuesday  :795886  \n Median :2022-08-13   June     : 752293   Median :16.00   Wednesday:803285  \n Mean   :2022-08-24   September: 684588   Mean   :15.73   Thursday :841694  \n 3rd Qu.:2022-10-14   May      : 621419   3rd Qu.:23.00   Friday   :810410  \n Max.   :2023-03-31   October  : 544927   Max.   :31.00   Saturday :900717  \n                      (Other)  :1487306                   Sunday   :767652  \n      hour               time_of_day     \n Min.   : 0.0   Late afternoon :1460418  \n 1st Qu.:11.0   Early evening  :1088148  \n Median :15.0   Early afternoon:1005958  \n Mean   :14.2   Late morning   : 731521  \n 3rd Qu.:18.0   Early morning  : 633498  \n Max.   :23.0   Late evening   : 498286  \n                (Other)        : 243677  \n                          start_station_name \n Streeter Dr & Grand Ave           :  72448  \n DuSable Lake Shore Dr & Monroe St :  39803  \n Michigan Ave & Oak St             :  38761  \n DuSable Lake Shore Dr & North Blvd:  38704  \n Wells St & Concord Ln             :  37647  \n (Other)                           :4628555  \n NA's                              : 805588  \n                           end_station_name     start_lat       start_lng     \n Streeter Dr & Grand Ave           :  73114   Min.   :41.64   Min.   :-87.84  \n DuSable Lake Shore Dr & North Blvd:  41101   1st Qu.:41.88   1st Qu.:-87.66  \n Michigan Ave & Oak St             :  39301   Median :41.90   Median :-87.64  \n DuSable Lake Shore Dr & Monroe St :  38651   Mean   :41.90   Mean   :-87.65  \n Wells St & Concord Ln             :  37788   3rd Qu.:41.93   3rd Qu.:-87.63  \n (Other)                           :4588267   Max.   :42.07   Max.   :-87.52  \n NA's                              : 843284                                   \n    end_lat         end_lng      \n Min.   :41.55   Min.   :-88.14  \n 1st Qu.:41.88   1st Qu.:-87.66  \n Median :41.90   Median :-87.64  \n Mean   :41.90   Mean   :-87.65  \n 3rd Qu.:41.93   3rd Qu.:-87.63  \n Max.   :42.37   Max.   :-87.30  \n                                 \n\n\n\nTravel time\n\nfind_mode &lt;- function(x) {\n  u &lt;- unique(x)\n  tab &lt;- tabulate(match(x, u))\n  u[tab == max(tab)]\n}\n\n\nmin(bike_rides_clean$travel_time) # shortest ride\n\n[1] 1.02\n\nmax(bike_rides_clean$travel_time) # longest ride\n\n[1] 1439.37\n\nmean(bike_rides_clean$travel_time) # straight average (total travel time / rides)\n\n[1] 16.212\n\nmedian(bike_rides_clean$travel_time) # midpoint number in the ascending array of travel times\n\n[1] 10.27\n\nfind_mode(bike_rides_clean$travel_time) # the value that occurs most often\n\n[1] 5.38\n\nsd(bike_rides_clean$travel_time) # standard deviation (how dispersed the data is in relation to the mean)\n\n[1] 28.42452\n\n\n\nShortest ride: 1.02 min.\nLongest ride: 1439.37 min.\nAverage ride: 16.212 min.\nMedian: 10.27 min.\nMode: 5.38 min.\nStandard deviation: 28.42452 min."
  },
  {
    "objectID": "projects/cyclistic/index.html#comparing-members-and-casual-users",
    "href": "projects/cyclistic/index.html#comparing-members-and-casual-users",
    "title": "Cyclistic Case Study",
    "section": "Comparing members and casual users",
    "text": "Comparing members and casual users\n\nNumber of rides\n\n\nShow the code\nbike_rides_clean |&gt;\n  count(user_type, sort = T)\n\n\n\n\n\nTable 1: Number of rides per user group between 1 April 2022 and 31 March 2023\n\n\nuser_type\nn\n\n\n\n\nmember\n3380657\n\n\ncasual\n2280849\n\n\n\n\n\n\n\n\n\nShow the code\nbike_rides_clean |&gt;\n  group_by(user_type) |&gt;\n  summarise(number_of_rides = n(), .groups = \"drop_last\") |&gt;\n  ggplot(aes(number_of_rides, user_type, fill = user_type)) +\n  geom_bar(\n    stat = \"identity\",\n    alpha = .5\n  ) +\n  scale_fill_manual(\n    values = c(\"#cf385b\", \"#0CF0BB\"),\n    labels = c(\"Casual\", \"Member\")\n  ) +\n  scale_x_continuous(labels = label_number()) +\n  scale_y_discrete(labels = c(\"Casual\", \"Member\")) +\n  theme_fivethirtyeight() +\n  theme(\n    panel.background = element_rect(fill = \"white\"),\n    legend.position = \"none\"\n  ) +\n  labs(\n    title = \"Number of rides per user group\",\n    subtitle = \"Based on data from 1 April 2022 to 31 March 2023\"\n  )\n\n\n\n\n\nFigure 11: Total number of bike rides per year\n\n\n\n\nBetween 1 April 2022 and 31 March 2023, casual users made 2,280,849 bike rentals, while members used the bike sharing service 3,380,657 times.\n\n\n\n\n\n\nNote\n\n\n\nAs mentioned above, due to protection of user privacy, we can’t link different bike trips to the same user, so we can’t say how many trips one user makes on average during different time units.\n\n\n\n\nBike preferences\n\n\nShow the code\nbike_rides_clean |&gt;\n  group_by(user_type, bike_type) |&gt;\n  summarise(\n    number_of_rides = n(),\n    percentage = round(100 * n() / nrow(bike_rides_clean), 1),\n    .groups = \"drop_last\"\n  ) |&gt;\n  arrange(desc(percentage))\n\n\n\n\n\nTable 2: Bike preference in numbers\n\n\nuser_type\nbike_type\nnumber_of_rides\npercentage\n\n\n\n\nmember\nclassic_bike\n1722307\n30.4\n\n\nmember\nelectric_bike\n1658350\n29.3\n\n\ncasual\nelectric_bike\n1237008\n21.8\n\n\ncasual\nclassic_bike\n874290\n15.4\n\n\ncasual\ndocked_bike\n169551\n3.0\n\n\n\n\n\n\n\n\n\nShow the code\nbike_rides_clean |&gt;\n  group_by(user_type) |&gt;\n  mutate(user_count = n()) |&gt;\n  group_by(bike_type, user_count, .add = TRUE) |&gt;\n  summarise(\n    bike_count = n(),\n    bike_pctg = round(bike_count / first(user_count) * 100, 1),\n    .groups = \"drop_last\"\n  )\n\n\n\n\n\nTable 3: Bike preference with sub-group percentages\n\n\nuser_type\nbike_type\nuser_count\nbike_count\nbike_pctg\n\n\n\n\ncasual\nclassic_bike\n2280849\n874290\n38.3\n\n\ncasual\ndocked_bike\n2280849\n169551\n7.4\n\n\ncasual\nelectric_bike\n2280849\n1237008\n54.2\n\n\nmember\nclassic_bike\n3380657\n1722307\n50.9\n\n\nmember\nelectric_bike\n3380657\n1658350\n49.1\n\n\n\n\n\n\n\n\n\nShow the code\nbike_rides_clean |&gt;\n  ggplot(aes(user_type, fill = bike_type)) +\n  geom_bar(\n    position = \"fill\",\n    alpha = .5\n  ) +\n  scale_fill_manual(\n    name = \"Bike type\",\n    values = c(\"#ffb635\", \"#bb2649\", \"#ad93b4\"),\n    labels = c(\"Classic bike\", \"Docked bike\", \"Electric bike\")\n  ) +\n  scale_y_continuous(labels = label_percent()) +\n  scale_x_discrete(labels = c(\"Casual\", \"Member\")) +\n  theme_fivethirtyeight() +\n  theme(\n    panel.background = element_rect(fill = \"white\"),\n    legend.position = \"right\",\n    legend.direction = \"vertical\"\n  ) +\n  labs(\n    title = \"Bike usage\",\n    subtitle = \"Based on data from 1 April 2022 to 31 March 2023\"\n  )\n\n\n\n\n\nFigure 12: Bike preferences\n\n\n\n\nThere is no clear distinction between the two groups in terms of bike choice. What you can see from the graph is that members tend to avoid docked bikes, choosing classic bikes half the time (51.4%) and electric bikes the other half (48.6%). Casual users ride electric bikes 53.9% of the time, classic bikes 38.5% and docked bikes only 7.5% of the time.\n\n\nAverage travel times\n\n\nShow the code\nbike_rides_clean |&gt;\n  group_by(user_type) |&gt;\n  summarise(average_travel_time = mean(travel_time)) |&gt;\n  ungroup()\n\n\n\n\n\nTable 4: Average time spent cycling\n\n\nuser_type\naverage_travel_time\n\n\n\n\ncasual\n21.75334\n\n\nmember\n12.47338\n\n\n\n\n\n\n\n\n\nShow the code\nbike_rides_clean |&gt;\n  group_by(user_type) |&gt;\n  summarise(average_travel_time = mean(travel_time)) |&gt;\n  ggplot(aes(average_travel_time, user_type, fill = user_type)) +\n  geom_col(alpha = .5) +\n  scale_fill_manual(\n    values = c(\"#BA2649\", \"#CEC2AE\"),\n    labels = c(\"Casual\", \"Member\")\n  ) +\n  scale_y_discrete(labels = c(\"Casual\", \"Member\")) +\n  theme_fivethirtyeight() +\n  theme(\n    panel.background = element_rect(fill = \"white\"),\n    legend.position = \"none\",\n    axis.title.x = element_text()\n  ) +\n  labs(\n    title = \"Average travel time by user group\",\n    subtitle = \"Based on data from 1 April 2022 to 31 March 2023\"\n  ) +\n  xlab(\"Average travel time in minutes\")\n\n\n\n\n\nFigure 13: Average travel time by user groups\n\n\n\n\nMembers spend an average of 12.47 minutes on their bikes, while casual users cycle for an average of 21.75 minutes. The difference in average travel time between the two groups is 9.28 minutes.\n\n\nCycling habits throughout the year\n\n\nShow the code\nbike_rides_clean |&gt;\n  group_by(user_type, date) |&gt;\n  summarise(number_of_rides = n(), .groups = \"drop_last\") |&gt;\n  arrange(desc(number_of_rides)) |&gt;\n  head()\n\n\n\n\n\nTable 5: Cycling habits throughout the year\n\n\nuser_type\ndate\nnumber_of_rides\n\n\n\n\ncasual\n2022-05-29\n20631\n\n\ncasual\n2022-07-09\n20462\n\n\ncasual\n2022-04-23\n19828\n\n\ncasual\n2022-06-18\n19781\n\n\ncasual\n2022-06-26\n19034\n\n\ncasual\n2022-07-30\n18942\n\n\n\n\n\n\n\n\n\nShow the code\nbike_rides_clean |&gt;\n  group_by(user_type, date) |&gt;\n  summarise(number_of_rides = n(), .groups = \"drop_last\") |&gt;\n  ggplot(aes(date, number_of_rides, color = user_type)) +\n  geom_line() +\n  scale_color_manual(\n    name = \"User\",\n    values = c(\"#cf385b\", \"#0CF0BB\"),\n    labels = c(\"Casual\", \"Member\")\n  ) +\n  scale_x_date(\n    breaks = breaks_width(\"1 month\"),\n    limits = c(as.Date(\"2022-04-01\"), as.Date(\"2023-03-31\")),\n    labels = label_date_short()\n  ) +\n  theme_fivethirtyeight() +\n  theme(\n    panel.background = element_rect(fill = \"white\"),\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\",\n    axis.title.y = element_text()\n  ) +\n  labs(\n    title = \"Cycling habits throughout the year\",\n    subtitle = \"Based on data from 1 April 2022 to 31 March 2023\"\n  ) +\n  ylab(\"Number of bike rides\")\n\n\n\n\n\nFigure 14: Number of rides over the course of one year\n\n\n\n\nBoth groups showed fairly similar cycling patterns over the past year. As expected, the increase in numbers followed the change of the seasons with members starting more bike rides in the colder months than casuals.\n\n\nCycling patterns during the week\n\n\nShow the code\nbike_rides_clean |&gt;\n  group_by(user_type, weekday) |&gt;\n  summarise(\n    number_of_rides = n(),\n    average_travel_time = mean(travel_time),\n    .groups = \"drop_last\"\n  ) |&gt;\n  arrange(desc(average_travel_time))\n\n\n\n\n\nTable 6: Cycling patterns during the week\n\n\nuser_type\nweekday\nnumber_of_rides\naverage_travel_time\n\n\n\n\ncasual\nSunday\n379877\n24.95871\n\n\ncasual\nSaturday\n460053\n24.53749\n\n\ncasual\nMonday\n269074\n21.96020\n\n\ncasual\nFriday\n332735\n20.56553\n\n\ncasual\nTuesday\n264714\n19.51056\n\n\ncasual\nThursday\n304307\n19.45462\n\n\ncasual\nWednesday\n270089\n18.54802\n\n\nmember\nSaturday\n440664\n13.95836\n\n\nmember\nSunday\n387775\n13.82034\n\n\nmember\nFriday\n477675\n12.28601\n\n\nmember\nThursday\n537387\n12.08078\n\n\nmember\nMonday\n472788\n11.97773\n\n\nmember\nTuesday\n531172\n11.87641\n\n\nmember\nWednesday\n533196\n11.86427\n\n\n\n\n\n\n\n\n\nShow the code\nbike_rides_clean |&gt;\n  group_by(user_type, weekday) |&gt;\n  summarise(\n    number_of_rides = n(),\n    .groups = \"drop_last\"\n  ) |&gt;\n  ggplot(aes(weekday, number_of_rides, fill = user_type)) +\n  geom_col(position = \"dodge\", alpha = .5) +\n  scale_fill_manual(\n    values = c(\"#cf385b\", \"#0CF0BB\"),\n    labels = c(\"Casual\", \"Member\"),\n    name = \"User\"\n  ) +\n  scale_y_continuous(labels = label_number()) +\n  theme_fivethirtyeight() +\n  theme(\n    panel.background = element_rect(fill = \"white\"),\n    legend.position = \"right\",\n    legend.direction = \"vertical\"\n  ) +\n  labs(\n    title = \"Number of rides by user group and day of the week\",\n    subtitle = \"Based on data from 1 April 2022 to 31 March 2023\"\n  )\n\n\n\n\n\nFigure 15: Cycling patterns during the week\n\n\n\n\nThe graph shows a clear difference between the two groups: Members use the service more on weekdays, with peak usage on Tuesday, Wednesday and Thursday, and a decrease from Friday onwards.\nIn contrast, casual users tend to make more trips from Thursday onwards and peak on the weekend.\n\n\nDaily average travel time\n\n\nShow the code\nbike_rides_clean |&gt;\n  group_by(user_type, weekday) |&gt;\n  summarise(\n    number_of_rides = n(),\n    average_travel_time = mean(travel_time),\n    .groups = \"drop_last\"\n  ) |&gt;\n  arrange(desc(average_travel_time))\n\n\n\n\n\nTable 7: Average travel time by day of the week\n\n\nuser_type\nweekday\nnumber_of_rides\naverage_travel_time\n\n\n\n\ncasual\nSunday\n379877\n24.95871\n\n\ncasual\nSaturday\n460053\n24.53749\n\n\ncasual\nMonday\n269074\n21.96020\n\n\ncasual\nFriday\n332735\n20.56553\n\n\ncasual\nTuesday\n264714\n19.51056\n\n\ncasual\nThursday\n304307\n19.45462\n\n\ncasual\nWednesday\n270089\n18.54802\n\n\nmember\nSaturday\n440664\n13.95836\n\n\nmember\nSunday\n387775\n13.82034\n\n\nmember\nFriday\n477675\n12.28601\n\n\nmember\nThursday\n537387\n12.08078\n\n\nmember\nMonday\n472788\n11.97773\n\n\nmember\nTuesday\n531172\n11.87641\n\n\nmember\nWednesday\n533196\n11.86427\n\n\n\n\n\n\n\n\n\nShow the code\nbike_rides_clean |&gt;\n  group_by(user_type, weekday) |&gt;\n  summarise(\n    number_of_rides = n(),\n    average_travel_time = mean(travel_time),\n    .groups = \"drop_last\"\n  ) |&gt;\n  ggplot(aes(weekday, average_travel_time, fill = user_type)) +\n  geom_col(position = \"dodge\", alpha = .5) +\n  scale_fill_manual(\n    values = c(\"#BA2649\", \"#CEC2AE\"),\n    labels = c(\"Casual\", \"Member\"),\n    name = \"User\"\n  ) +\n  scale_y_continuous(\n    labels = label_number(),\n  ) +\n  theme_fivethirtyeight() +\n  theme(\n    panel.background = element_rect(fill = \"white\"),\n    legend.position = \"right\",\n    legend.direction = \"vertical\",\n    axis.title = element_text(),\n    axis.title.x = element_blank()\n  ) +\n  labs(\n    title = \"Average travel time by day of the week\",\n    subtitle = \"Based on data from 1 April 2022 to 31 March 2023\"\n  ) +\n  ylab(\"Average travel time in minutes\")\n\n\n\n\n\nFigure 16: Average travel time by day of the week\n\n\n\n\nWe already saw that members make more trips than casual users but they spend less time on their bikes, while casuals do the opposite, they start less rides, but spend more time cycling.\nWe can also spot that the average travel time for members is fairly consistent, with no major fluctuations throughout the week, while casuals have a bigger rise in their average times at weekends and on Mondays.\n\n\nTime of the day\n\n\nShow the code\nbike_rides_clean |&gt;\n  group_by(time_of_day, user_type) |&gt; # groups by user type and time of day\n  summarise(\n    number_of_rides = n(),\n    .groups = \"drop_last\"\n  ) |&gt; # calculates the number of rides\n  arrange(desc(number_of_rides)) # sorts by number of rides\n\n\n\n\n\nTable 8: Cycling habits by time of day\n\n\ntime_of_day\nuser_type\nnumber_of_rides\n\n\n\n\nLate afternoon\nmember\n875232\n\n\nEarly evening\nmember\n637987\n\n\nLate afternoon\ncasual\n585186\n\n\nEarly afternoon\nmember\n561105\n\n\nEarly morning\nmember\n480586\n\n\nEarly evening\ncasual\n450161\n\n\nLate morning\nmember\n448281\n\n\nEarly afternoon\ncasual\n444853\n\n\nLate morning\ncasual\n283240\n\n\nLate evening\nmember\n257370\n\n\nLate evening\ncasual\n240916\n\n\nEarly morning\ncasual\n152912\n\n\nNight\ncasual\n92847\n\n\nNight\nmember\n71207\n\n\nDawn\nmember\n48889\n\n\nDawn\ncasual\n30734\n\n\n\n\n\n\n\n\n\nShow the code\nbike_rides_clean |&gt;\n  group_by(time_of_day, user_type) |&gt;\n  summarise(\n    number_of_rides = n(),\n    .groups = \"drop_last\"\n  ) |&gt;\n  ggplot(aes(\n    number_of_rides,\n    time_of_day,\n    fill = user_type\n  )) +\n  geom_col(position = \"dodge\", alpha = .5) +\n  scale_fill_manual(\n    values = c(\"#cf385b\", \"#0CF0BB\"),\n    labels = c(\"Casual\", \"Member\"),\n    name = \"User\"\n  ) +\n  scale_y_discrete(\n    limits = rev(levels(bike_rides_clean$time_of_day))\n  ) +\n  theme_fivethirtyeight() +\n  theme(\n    panel.background = element_rect(fill = \"white\"),\n    legend.position = \"right\",\n    legend.direction = \"vertical\"\n  ) +\n  labs(\n    title = \"Number of rides by user group and time of day\",\n    subtitle = \"Based on data from 1 April 2022 to 31 March 2023\"\n  )\n\n\n\n\n\nFigure 17: Cycling habits by time of day\n\n\n\n\nThis graph shows how cycling activity change throughout the day. Late afternoon (15:00-18:00) is when most people from both groups get on their bikes.\nOne might think that the majority of members would cycle to work in the morning and then cycle home in the afternoon, but our data suggest that morning cycling is far less popular than afternoon cycling.\nUnlike members, casual users prefer to skip the early morning rush (6:00-9:00) and cycle in the afternoon and evening hours instead.\n\n\nAverage travel time by time of day\n\n\nShow the code\nbike_rides_clean |&gt;\n  group_by(time_of_day, user_type) |&gt;\n  summarise(\n    average_travel_time = mean(travel_time),\n    .groups = \"drop_last\"\n  ) |&gt;\n  ggplot(aes(\n    average_travel_time,\n    time_of_day,\n    fill = user_type\n  )) +\n  geom_col(position = \"dodge\", alpha = .5) +\n  scale_fill_manual(\n    values = c(\"#BA2649\", \"#CEC2AE\"),\n    labels = c(\"Casual\", \"Member\"),\n    name = \"User\"\n  ) +\n  scale_y_discrete(\n    limits = rev(levels(bike_rides_clean$time_of_day))\n  ) +\n  theme_fivethirtyeight() +\n  theme(\n    panel.background = element_rect(fill = \"white\"),\n    legend.position = \"right\",\n    legend.direction = \"vertical\"\n  ) +\n  labs(\n    title = \"Average travel time by user group and time of day\",\n    subtitle = \"Based on data from 1 April 2022 to 31 March 2023\"\n  ) +\n  xlab(\"Average travel time in minutes\")\n\n\n\n\n\nFigure 18: Average travel time by time of day\n\n\n\n\nThe average travel time of members remains roughly the same regardless of the time of day, while the average cycling time of casual users varies more depending on the time of day. Casuals start their longest rides in late morning and early afternoon.\n\n\nNumber of rides per hour started\n\n\nShow the code\nbike_rides_clean |&gt;\n  group_by(hour, user_type) |&gt; # groups by user type and hour\n  summarise(\n    number_of_rides = n(),\n    .groups = \"drop_last\"\n  ) |&gt; # calculates the number of rides\n  arrange(desc(number_of_rides)) |&gt; # sorts by number of rides\n  head()\n\n\n\n\n\nTable 9: Number of rides per hour started\n\n\nhour\nuser_type\nnumber_of_rides\n\n\n\n\n17\nmember\n354753\n\n\n16\nmember\n296099\n\n\n18\nmember\n285994\n\n\n15\nmember\n224380\n\n\n17\ncasual\n216029\n\n\n8\nmember\n210792\n\n\n\n\n\n\n\n\n\nShow the code\nbike_rides_clean |&gt;\n  group_by(user_type, hour) |&gt;\n  summarise(\n    number_of_rides = n(),\n    .groups = \"drop_last\"\n  ) |&gt;\n  ggplot(aes(hour, number_of_rides, fill = user_type)) +\n  geom_col(position = \"dodge\", alpha = .5) +\n  scale_fill_manual(\n    values = c(\"#cf385b\", \"#0CF0BB\"),\n    labels = c(\"Casual\", \"Member\"),\n    name = \"User\"\n  ) +\n  scale_x_continuous(breaks = c(2, 5, 8, 11, 14, 17, 20, 23)) +\n  scale_y_continuous(labels = label_number()) +\n  theme_fivethirtyeight() +\n  theme(\n    panel.background = element_rect(fill = \"white\"),\n    legend.position = \"right\",\n    legend.direction = \"vertical\"\n  ) +\n  labs(\n    title = \"Number of rides per hour started\",\n    subtitle = \"Based on data from 1 April 2022 to 31 March 2023\"\n  )\n\n\n\n\n\nFigure 19: Number of rides per hour started\n\n\n\n\nWhen analysing the hour at which users started their trips, the two groups show slightly different habits. Members are more active throughout the day, while casual users show a steady increase from morning to late afternoon.\nThe peak hour of the day is around 17:00 for both groups, but members also have a morning peak around 8:00. From late afternoon to early morning, both groups show a similar pattern of decreasing numbers of departures.\n\n\nStations with the most traffic\nRanking the most popular departure stations:\n\nstations_popularity &lt;- bike_rides_clean |&gt;\n  count(user_type, start_station_name, start_lat, start_lng, sort = T)\n\nstations_pop_sample &lt;- stations_popularity[1:100, ]\n\nsummary(stations_pop_sample$n)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   6798    7638    8381    9585    9942   38940 \n\n\nGetting user group specific data:\n\nmember_stations &lt;- stations_popularity |&gt;\n  filter(user_type == \"member\")\n\nmember_stations &lt;- member_stations[1:100, ]\n\ncasual_stations &lt;- stations_popularity |&gt;\n  filter(user_type == \"casual\")\n\ncasual_stations &lt;- casual_stations[1:100, ]\n\nDefining labels:\n\ntext_c &lt;- paste(\n  \"Station: \", casual_stations$start_station_name, \"&lt;br/&gt;\",\n  \"Departures: \", casual_stations$n, \"&lt;br/&gt;\",\n  sep = \"\"\n) |&gt;\n  lapply(htmltools::HTML)\n\ntext_m &lt;- paste(\n  \"Station: \", member_stations$start_station_name, \"&lt;br/&gt;\",\n  \"Departures: \", member_stations$n, \"&lt;br/&gt;\",\n  sep = \"\"\n) |&gt;\n  lapply(htmltools::HTML)\n\nThe busiest departure stations by user groups:\n\nmap &lt;- leaflet() |&gt;\n  clearBounds() |&gt;\n  addTiles() |&gt;\n  addCircles(\n    data = casual_stations,\n    lng = ~start_lng,\n    lat = ~start_lat,\n    weight = 1,\n    radius = ~ sqrt(n),\n    stroke = 3,\n    color = \"white\",\n    fillColor = \"#ff0984\",\n    fillOpacity = 0.7,\n    label = text_c,\n    group = \"Casual\",\n    highlightOptions = highlightOptions(\n      color = \"#ffb4d1\",\n      weight = 3,\n      stroke = 6,\n      bringToFront = TRUE,\n      opacity = 1\n    )\n  ) |&gt;\n  addCircles(\n    data = member_stations,\n    lng = ~start_lng,\n    lat = ~start_lat,\n    weight = 1,\n    radius = ~ sqrt(n),\n    stroke = 3,\n    color = \"white\",\n    fillColor = \"#21409a\",\n    fillOpacity = 0.7,\n    label = text_m,\n    group = \"Member\",\n    highlightOptions = highlightOptions(\n      color = \"#04adff\",\n      weight = 3,\n      stroke = 6,\n      bringToFront = TRUE,\n      opacity = 1\n    )\n  ) |&gt;\n  addLayersControl(\n    overlayGroups = c(\"Casual\", \"Member\"),\n    options = layersControlOptions(collapsed = FALSE)\n  )\n\nVisualization:\n\n\nmap\n\n\n\n\n(a) Zoom and hover to see the station name and number of departures. Select the user group by ticking the boxes in the top right hand corner.\n\n\nFigure 20: Busiest departure stations between 1 April 2022 and 31 March 2023\n\n\nA compilation of the 100 most visited stations by members and casual users:\n\nlibrary(dplyr)\n\ntop_stations &lt;- bind_rows(member_stations, casual_stations)\n\nsummary(top_stations$n)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   3467    4814    6791    7308    8380   38940 \n\n\nCreating a color palette with handmade bins:\n\nmy_bins &lt;- seq(3000, 39000, by = 6000)\nmy_palette &lt;- colorBin(\n  palette = \"plasma\", domain = top_stations$n, na.color = \"white\",\n  bins = my_bins\n)\n\nThe 100 busiest departure stations for casual users:\n\nc_map &lt;- leaflet(casual_stations) |&gt;\n  clearBounds() |&gt;\n  addTiles() |&gt;\n  addCircles(\n    lng = ~start_lng,\n    lat = ~start_lat,\n    weight = 1,\n    radius = ~ sqrt(n),\n    fillColor = ~ my_palette(n),\n    fillOpacity = 0.8,\n    stroke = TRUE,\n    label = text_c\n  ) |&gt;\n  addLegend(\n    \"bottomright\",\n    pal = my_palette,\n    values = ~n,\n    title = \"Number of departures\",\n    opacity = 1\n  )\n\nVisualization:\n\n\nc_map\n\n\n\n\n(a) Zoom and hover to see the station name and number of departures\n\n\nFigure 21: The 100 most popular departure points for casual users\n\n\nThe 100 busiest departure stations for members:\n\nm_map &lt;- leaflet(member_stations) |&gt;\n  clearBounds() |&gt;\n  addTiles() |&gt;\n  addCircles(\n    lng = ~start_lng,\n    lat = ~start_lat,\n    weight = 1,\n    radius = ~ sqrt(n),\n    fillColor = ~ my_palette(n),\n    fillOpacity = 0.8,\n    stroke = TRUE,\n    label = text_m\n  ) |&gt;\n  addLegend(\n    \"bottomright\",\n    pal = my_palette,\n    values = ~n,\n    title = \"Number of departures\",\n    opacity = 1\n  )\n\nVisualization:\n\n\nm_map\n\n\n\n\n(a) Zoom and hover to see the station name and number of departures\n\n\nFigure 22: The 100 most popular departure points for members"
  },
  {
    "objectID": "projects/cyclistic/index.html#industry",
    "href": "projects/cyclistic/index.html#industry",
    "title": "Cyclistic Case Study",
    "section": "",
    "text": "According to the Meddin bike-sharing map, bike-sharing systems are present in 1,590 cities, in 92 countries and on every continent (except Antarctica). In April 2023, the world had 1,914 systems in operation with a fleet of 8,980,314 bikes. For the latest industry trends, read The Meddin Bike-sharing World Map Report. The origins of bike-sharing can be traced back to grassroots efforts in the Netherlands in the mid-1960s. For more historical context, see Bloomberg."
  },
  {
    "objectID": "projects/cyclistic/index.html#company",
    "href": "projects/cyclistic/index.html#company",
    "title": "Cyclistic Case Study",
    "section": "",
    "text": "Cyclistic is a (fictional) bike-share company launched in 2016. It operates a fleet of 5,824 bikes that are geotracked and locked into a network of 1419 stations across Chicago. The bikes can be unlocked from one station and returned to any other station in the system at any time."
  },
  {
    "objectID": "projects/cyclistic/index.html#key-insights",
    "href": "projects/cyclistic/index.html#key-insights",
    "title": "Cyclistic Case Study",
    "section": "Key insights",
    "text": "Key insights\n\nMembers make more trips than casual users but spend less time on their bikes, while casual users do the opposite, making fewer trips but spending more time on their bikes.\nMembers spend an average of 12.47 minutes on their bikes, while casual users cycle for an average of 21.75 minutes. The difference in average ride time between the two groups is almost 10 minutes.\nMembers use the service more on weekdays, with peak usage on Tuesday, Wednesday and Thursday, and a decrease from Friday onward. In contrast, casual users tend to make more trips from Thursday onward and peak on the weekend.\nThe average travel time for members is fairly consistent, with no major fluctuations throughout the week, while casuals have a greater increase in their average times at weekends and on Mondays.\nMembers are more active regardless of the time of day, while the number of casual rides increases steadily from morning to late afternoon. The peak hour of the day is around 17:00 for both groups, but members also have a morning peak around 8:00. Morning cycling is less popular among casuals.\nThe most popular departure points for casuals are concentrated around tourist attractions closer to the coast, while the most popular stations for members are more spread out across the city. The University of Chicago area is an extremely popular departure point for members."
  }
]